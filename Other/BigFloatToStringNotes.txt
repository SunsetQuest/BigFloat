2:02 PM 2/15/2023: 
Notes on ToString() method to figure out how many digits we need to store and print.

ifAny1    = if we guarantee by a whole increment
ifAny1/2  = if we guarantee by a 1/2   increment

in binary                           in dec       ifAny1  ifAny1/2     bitNeeded

0.0000000000000000000000011010110   0.0000001     ?                     0+1=1
0.0000000000000000000000101000010   0.00000015
0.0000000000000000000000110101101   0.0000002     11                    1+1=2  
0.0000000000000000000001000011000   0.00000025
0.0000000000000000000001011101111   0.0000003     10                  1.6+1=2.6
0.0000000000000000000001011101111   0.00000035
0.0000000000000000000001101011010   0.0000004     110                   2+1=3
0.0000000000000000000001111000110   0.00000045
0.0000000000000000000010000110001   0.0000005     100
0.0000000000000000000010010011101   0.00000055
0.0000000000000000000010100001000   0.0000006      1010  10100
0.0000000000000000000010101110011   0.00000065
0.0000000000000000000010111011111   0.0000007      1011  1011xxxx     2.8+1=4
0.0000000000000000000011001001010   0.00000075
0.0000000000000000000011010110101   0.0000008      110   1101xxxx  	3+1=4
0.0000000000000000000011100100001   0.00000085
0.0000000000000000000011110001100   0.0000009      111   11110xxxxx   3.2+1=5
0.0000000000000000000011111111000   0.00000095
0.0000000000000000000100001100011   0.0000010     1000   10000xxxxx   3.3+1=5 
0.0000000000000000000100011001110   0.00000105
0.0000000000000000000100100111010   0.0000011     1001	 10010xxxxx   3.46+1=5
0.000000000000000000010011 010010   0.00000115      
0.000000000000000000010100001000    0.0000012    10100  101000xxxxx  3.59+1=6
0.000000000000000000010100111110    0.00000125
0.0000000000000000000101011100111   0.0000013    10101   10101
0.0000000000000000000101101010011   0.00000135    

====================================================================

    /// <summary>
    /// Writes a BigFloat in Hex('X') or Binary('B'). A radix point is supported. negative values will have a leading '-'. 
    /// </summary>
    /// <param name="format">'X' for Hex; 'B' for Binary</param>
    /// <returns>The value as a string.</returns>
    public string ToString0(string format)
    {
        if (string.IsNullOrEmpty(format))
        {
            return ToString();
        }

        if (format[0] == 'X') //hex with radix point
        {
            if (Scale >= 0)
            {
                return (_int >> (ExtraHiddenBits - Scale)).ToString("X");
            }

            // We have to align the INT to the nearest 4 bits for hex. We also want to remove the ExtraHiddenBits.
            // The number of bits between the radix point and the end should be divisible by 4. We will dig into the ExtraHiddenBits for this.
            int rightShift = (ExtraHiddenBits - Scale) & 0x03;

            BigInteger shiftedBigIntForDisplay = RightShiftWithRound(_int, rightShift);

            return shiftedBigIntForDisplay.ToString("X").Insert((-Scale / 4) - 1, ".");
        }

        if (format[0] == 'B') // Binary with Radix Point(Radix Point is a "decimal point" for all bases)
        {
            // Setup destination and allocate memory
            Span<char> dstBytes = stackalloc char[_size - ExtraHiddenBits
                + Math.Max(Math.Max(Scale, -(_size - ExtraHiddenBits) - Scale), 0) // total number of out-of-precision zeros in the output.
                + (_int.Sign < 0 ? 1 : 0)   // add one if a leading '-' sign (-0.1)
                + (Scale < 0 ? 1 : 0)       // add one if it has a point like (1.1)
                + (Exponent <= 0 ? 1 : 0)];  // add one if <1 for leading Zero (0.1) 
            int dstIndex = 0;

            // Three types
            //   Type '12300' - if all bits are to the left of the radix point(no radix point required)
            //   Type '12.30' - has numbers below AND above the point. (i.e., 11.01)
            //   Type '0.123' - all numbers are to the right of the radix point. (has leading 0.or - 0.)

            // Add the leading sign character.
            if (_int.Sign < 0)
            {
                dstBytes[dstIndex] = '-';
                dstIndex++;
            }

            // Setup source bits to read.
            ReadOnlySpan<byte> srcBytes = DataIntValueWithRound(BigInteger.Abs(_int)).ToByteArray();
            int leadingZeroCount = BitOperations.LeadingZeroCount(srcBytes[^1]) - 24;

            if (Exponent <= 0)  // For all numbers less then zero. (i.e. 0.001101)
            {
                int outputZerosBetweenPointAndNumber = Math.Max(0, -(_size - ExtraHiddenBits) - Scale);
                dstBytes[dstIndex++] = '0';
                dstBytes[dstIndex++] = '.';

                // Add the leading zeros
                for (int i = 0; i < outputZerosBetweenPointAndNumber; i++)
                {
                    dstBytes[dstIndex++] = '0';
                }

                WriteValueBits(srcBytes, leadingZeroCount, Size, dstBytes[dstIndex..]);
            }
            else if (Scale >= 0)   // For numbers with no radix point. (i.e., 1101)
            {
                int outputZerosBetweenNumberAndPoint = Math.Max(0, Scale);
                dstBytes[^outputZerosBetweenNumberAndPoint..].Fill('0');
                WriteValueBits(srcBytes, leadingZeroCount, Size, dstBytes[dstIndex..]);
            }
            else // For numbers with a radix point in the middle somewhere (i.e., 101.1, 10.01, or 1.00)
            {
                int outputBitsBeforePoint = _size - ExtraHiddenBits + Scale;
                int outputBitsAfterPoint = Math.Max(0, -Scale);

                WriteValueBits(srcBytes, leadingZeroCount, outputBitsBeforePoint, dstBytes[dstIndex..]);

                dstIndex += outputBitsBeforePoint;

                //Write Decimal point
                dstBytes[dstIndex++] = '.';
                WriteValueBits(srcBytes, leadingZeroCount + outputBitsBeforePoint, outputBitsAfterPoint, dstBytes[dstIndex..]);
            }

            return new string(dstBytes);
        }

        // If none of the above formats ('X' or 'B') matched. then fail.
        throw new FormatException($"The {format} format string is not supported.");

        // Supporting functions for this function.
        static void WriteValueBits(ReadOnlySpan<byte> srcBytes, int bitStart, int bitCount, Span<char> dstBytes)
        {
            int srcLoc = srcBytes.Length - 1;
            int dstByte = 0;
            int cur = bitStart;

            while (cur < bitStart + bitCount)
            {
                int curSrcByte = srcLoc - (cur >> 3);
                int curSrcBit = 7 - (cur & 0x7);

                byte b2 = srcBytes[curSrcByte];

                dstBytes[dstByte++] = (char)('0' + ((b2 >> curSrcBit) & 1));
                cur++;
            }
        }
    }
