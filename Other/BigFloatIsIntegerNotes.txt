

    public bool IsIntegerLegacy // v2 2023-2-6
    {
        get
        {
            // Number          Scale Beg  End  IsInt 
            //1.0000[00010101] S:-4 beg: 4    end:8+4 is F b/c first 7 of 12 bits off ; b/c bits 4 to 11 are not all 0s or 1s
            // 10.00[00010101] S:-2 beg: 4    end:8+2 is F b/c first 5 of 10 bits off ; b/c bits 4 to  9 are not all 0s or 1s
            // 100.0[01010101] S:-1 beg: 4    end:8+1 is F b/c first 2 of 9 bits off  ; b/c bits 4 to  8 are not all 0s or 1s
            //  101.[00001111] S: 0 beg: 4    end:8+0 is T b/c first 4 of 8 bits off  ; b/c bits 4 to  7 are     all 0s or 1s
            //  101[01.000000] S: 2 beg:end/2 end:8-2 is T b/c first 6 of 6 bits off  ; b/c bits 3 to  5 are     all 0s or 1s
            //  101[001.01111] S: 3 beg:end/2 end:8-3 is F b/c first 1 of 5 bits off  ; b/c bits 2 to  4 are not all 0s or 1s  (or 3 to 4)
            //  101[1111.1111] S: 4 beg:end/2 end:8-4 is T b/c first 4 of 4 bits on   ; b/c bits 2 to  3 are     all 0s or 1s
            //  101[1111.0111] S: 4 beg:end/2 end:8-4 is F b/c first 1 of 4 bits off  ; b/c bits 2 to  3 are not all 0s or 1s  
            //  101[11111.111] S: 5 beg:end/2 end:8-5 is T b/c first 3 of 3 bits on   ; b/c bits 1 to  2 are     all 0s or 1s  (or 2 to 2)
            //  101[11110.110] S: 5 beg:end/2 end:8-5 is T b/c first 2 of 3 bits on   ; b/c bits 1 to  2 are     all 0s or 1s  (or 2 to 2)
            //  Any Scale less then (ExtraHiddenBits-2) should not be included. (2 is arbitrarily picked)
            //  101[000111.11] S: 6 beg:end/2 end:8-6 is T b/c too small              ; b/c bits 1 to  1 are     all 0s or 1s
            //  101[000101.10] S: 6 beg:end/2 end:8-6 is T b/c too small              ; b/c bits 1 to  1 are not all 0s or 1s
            //  101[0001111.1] S: 7 beg:end/2 end:8-7 is T b/c too small              ; -Scale < ExtraHiddenBits-1
            //  101[0001011.0] S: 7 beg:end/2 end:8-7 is T b/c too small              ; b/c bits 0 to  0 are     all 0s or 1s (always true)
            //  101[00010110.] S: 8 beg:end/2 end:8-8 is T b/c no fraction            ; b/c bits 0 to  0 are     all 0s or 1s (always true)
            int begMask;
            int endMask = ExtraHiddenBits - Scale;

            if (Scale <= 0)
            {
                // if radix in front of HiddenBits, check bits from radix to half way through hidden bits.
                begMask = ExtraHiddenBits / 2;
                endMask = ExtraHiddenBits - Scale;
            }
            else if (Scale > (ExtraHiddenBits - 2))  // "2" was arbitrarily picked
            {
                return true;
            }
            else // if ( Scale >(ExtraHiddenBits-2)  &&  Scale <= 0 )
            {
                // if radix in hiddenBits, check between radix and half way to end.
                begMask = endMask / 2;
            }

            BigInteger mask1 = ((BigInteger.One << endMask) - 1) ^ ((BigInteger.One << (begMask)) - 1); //This line by Anant Agarwal.
            BigInteger mask2 = ((BigInteger.One << (endMask - begMask)) - 1) << begMask;  // This line by Sunsetquest  //Benchmark
            if (mask1 != mask2)
            {
                throw new Exception();  // temp for testing
            }

            bool allBitsZero = (_int & mask1) == 0;
            if (allBitsZero)
            {
                return true;
            }

            bool allBitsOne = (_int | mask1) == _int;
            return allBitsOne;
        }
    }