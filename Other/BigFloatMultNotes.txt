


4/2023
    //public static BigFloat operator *(BigFloat a, BigFloat b)
    //{
    //    BigInteger prod;
    //    int shouldBe;

    //    // todo: for performance what about no shift when _size's are around the same size. (like within 32) 
    //    // should be 42392656037190875851739737828733  but should be 42392656037190875851739737828732

    //    int sizeDiff = a._size - b._size;

    //    if (sizeDiff > 0)
    //    {
    //        prod = (a._int >> sizeDiff) * b._int;
    //        shouldBe = b._size;
    //    }
    //    else
    //    {
    //        prod = (b._int << sizeDiff) * a._int;
    //        shouldBe = a._size;
    //    }

    //    int sizePart = (int)BigInteger.Abs(prod).GetBitLength();
    //    int shrinkBy = sizePart - shouldBe;

    //    prod = RightShiftWithRound(prod, shrinkBy, ref sizePart);

    //    int resScalePart = a.Scale + b.Scale + shrinkBy + Math.Abs(sizeDiff) - ExtraHiddenBits;

    //    BigFloat result = new(prod, resScalePart, sizePart);

    //    return result;
    //}


11:33 PM 3/27/2023:
    public static BigFloat operator *(BigFloat a, BigFloat b)
    {
        BigInteger prod;

        // let ExtraHiddenBits = 2
        //
        // 0:12            3
        // 012:34          5
        // 0:1234567       1+7=8  7x
        //
        // 012:34            5
        // 01234:56          7
        // 012:345678901     3+9=12    3x
        //
        // 012345:67            8
        // 01234567:89          10
        // 012345:678901234567  6+12=18   2x

        int sizeDiff = Math.Abs(a.Size - b.Size);
        int halfOfSizeDiff = sizeDiff >> 1;
        if (a.Size > b.Sign)
        {
            prod = (a._int >> halfOfSizeDiff) * b._int ;
        }
        else
        {
            prod = (b._int >> halfOfSizeDiff) * a._int;
        }

        int sizePart = (int)BigInteger.Abs(prod).GetBitLength();
        int shouldBe = Math.Min(a.Size, b.Size) + ExtraHiddenBits;
        int shrinkBy = sizePart - shouldBe;

        int temp = sizeDiff;
        int increment = 0;
        //prod = RightShiftAndRound(prod, shrinkBy, ref sizeDiff);  do we need this? (I'm thinking not, like for 11111 rounds up to a larger number)
        prod = RightShiftWithRound(prod, shrinkBy, ref sizeDiff);
        sizePart -= shrinkBy;


        //res: 11110110___________________ <-- scale should be (a.scale + b.scale + (r0.size - smaller.size)) [size: 8, scale:10+1+8]
        //int resScalePart = a.Scale + b.Scale + halfOfSizeDiff + temp + increment;
        int resScalePart = a.Scale + b.Scale + shrinkBy+ halfOfSizeDiff - ExtraHiddenBits + increment;


        //int sizePart = (int)prod.GetBitLength() + ExtraHiddenBits + ((prod.Sign < 0 && prod.IsPowerOfTwo) ? 1 : 0);  //todo: maybe this is faster
        BigFloat ret = new(prod, resScalePart, sizePart);

        return ret;
    }


Jan 2023 (ballpark)
    public static BigFloat  PastMult(BigFloat a, BigFloat b)
    {
        // Number    Size   IntPart   Scale   Exp   
        // 111111.1  [7]    1111111   -1      6-1= 5c
        //     * .10 [2]    10        -2      0-1=-1
        //=============================================
        //  11___.__ [2]    11        5-2=3

        // example steps:
        // 1:  a:            10110101__________   ' smaller size   [size: 8, scale:10]
        // 2:  b:                    101011100_   ' larger  size   [size: 9, scale: 1]
        // 3:  r0:             1111011000001100   ' a.int * b.int  [size:16, scale: _]
        // 4:  r1                      11110110   ' len should be size of "smaller", "r0 >> (r0.size - smaller.size)"
        // 5:  res: 11110110___________________   ' scale should be (a.scale + b.scale + (r0.size - smaller.size)) [size: 8, scale:10+1+8]


        //r0:             1111011000001100     a.int * b.int  [size:16, scale: _]
        BigInteger prod = a._int * b._int;

        //r1                      11110110 <-- len should be size of "smaller", "r0 >> (r0.size - smaller.size)"
        int size = (int)BigInteger.Abs(prod).GetBitLength();
        int smallerSize = Math.Min(b.Size, a.Size);
        int downshiftProd = size - smallerSize - ExtraHiddenBits;
        prod = RightShiftWithRound(prod, downshiftProd);

        //int sizeAfter = size;
        //prod = RightShiftAndRound(prod, downshiftProd, ref sizeAfter);  do we need this? (I'm thinking not, like for 11111 rounds up to a larger number)
        //if (size != sizeAfter) downshiftProd++;


        //res: 11110110___________________ <-- scale should be (a.scale + b.scale + (r0.size - smaller.size)) [size: 8, scale:10+1+8]
        int resScalePart = a.Scale + b.Scale + downshiftProd - ExtraHiddenBits;

        //int size = (int)prod.GetBitLength() + ExtraHiddenBits + ((prod.Sign < 0 && prod.IsPowerOfTwo) ? 1 : 0);  //todo: maybe this is faster
        BigFloat ret = new(prod, resScalePart, size);

        return ret;



        //// 18= a.scale + b.scale + larger.size;   
        //if (a.Scale == b.Scale)
        //{
        //    return new BigFloat((a.Int * b.Int) << a.Scale, b.Scale);
        //}
        //else if (a.Scale < b.Scale)
        //{
        //    return new BigFloat((a.Int * b.Int) << a.Scale, outScale);
        //}
        //else // if (r1.Scale > r2.Scale)
        //{
        //    return new BigFloat((a.Int * b.Int) >> a.Scale, b.Scale);
        //}
    }



