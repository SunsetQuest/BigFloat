As of Wednesday, December 11, 2024. (very little change made today, most of last changes were several months ago)

    public static BigInteger NoDivSqrt(BigInteger x)
    {
        return NoDivSqrt(x, false);
    }

    public static BigInteger NoDivSqrt6(BigInteger x, bool SHOW = false)
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        if (xAsDub < 4.3322e127)
        {
            BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
            v = (v + (x / v)) >> 1;
            if (xAsDub > 2e63)
            {
                v = (v + (x / v)) >> 1;
            }
            return (v * v <= x) ? v : v - 1;
        }

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;

        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }

        ////////  Classic Newton Iterations ////////
        BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        int size = 106;
        for (; size < 256; size <<= 1)
        {
            val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        }

        if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {
            int EXTRA_BITS_TO_REMOVE = 2;

            ////////  Apply Starting Size  ////////
            //int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 2;
            //int wantedSize = (wantedPrecision >> numOfNewtonSteps) + 2;
            int startingSize = wantedPrecision + 6;
            int numOfNewtonSteps = 0;
            while (startingSize > size)
            {
                startingSize = ((startingSize + EXTRA_BITS_TO_REMOVE) / 2) + 1;
                numOfNewtonSteps++;
            }

            int needToShiftBy = size - startingSize;
            val >>= needToShiftBy;
            size = startingSize;

            //////// Get the Inverse of X ////////
            //int magShift = 2 * xLen - (((xLen & 0x01) == 0) ? 0 : -1);
            //BigInteger mag = BigInteger.One << magShift;
            //BigInteger xInv = mag / x;
            BigInteger THREE = ((BigInteger)3);



            //////// Get the Inverse of X ////////
            int finalSize = wantedPrecision + (4 << (numOfNewtonSteps)) + 4;
            // BigInteger mag = BigInteger.One << (2 * finalSize);               //  2x
            // BigInteger xInv = mag / (x >> (xLen - finalSize));              //  x  = 2x - x
            BigInteger xInv = ToolsForOther.InverseBigIntegerClassic(x, finalSize + 1);


            //int xInv2Shift = (int)xInv.GetBitLength() - 1 - xLen % 2;         //  x: m-m+x   can we quicken this?
            int xInv2Shift = finalSize - xLen % 2;         //  x: m-m+x   can we quicken this?



            //Console.WriteLine($"...{ToolsForOther.ToBinaryString(xInv)}[{xInv.GetBitLength()}] ");

            //////// Get the Inverse of X ////////
            //// Scaling factor: 2^precisionBits


            if (false)
            {
                BigInteger xInvTest1 = (((ulong)1<<(2*15+10)) /123123) >> 10 ;
            //BigInteger xInv1 = ToolsForOther.InverseBigInteger(123123, 15);


            //BigInteger valToTest = BigInteger.Parse("12312312312312312312");
            //{
            //    int valLen = (int)valToTest.GetBitLength();
            //    BigInteger xInvTst = (((BigInteger)1 << (valLen * 2 + 10)) / valToTest) >> 10;
            //    BigInteger xInvRes = ToolsForOther.InverseBigInteger(valToTest, valLen);
            //    Console.WriteLine($"missed last {xInvRes.GetBitLength() - ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {xInvRes.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
            //}

            //valToTest = BigInteger.Parse("12312312312312312312123123");
            //{
            //    int valLen = (int)valToTest.GetBitLength();
            //    BigInteger xInvTst = (((BigInteger)1 << (valLen * 2 + 10)) / valToTest) >> 10;
            //    BigInteger xInvRes = ToolsForOther.InverseBigInteger(valToTest, valLen);
            //    Console.WriteLine($"missed last {xInvRes.GetBitLength() - ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {xInvRes.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
            //}

            //valToTest = BigInteger.Parse("12312312123123123123123123123123121231231231231231231231231212312312312312312312312312123123");
            //{
            //    int valLen = (int)valToTest.GetBitLength();
            //    BigInteger xInvTst = (((BigInteger)1 << (valLen * 2 + 10)) / valToTest) >> 10;
            //    BigInteger xInvRes = ToolsForOther.InverseBigInteger(valToTest, valLen);
            //    Console.WriteLine($"missed last {xInvRes.GetBitLength() - ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {xInvRes.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
            //}


                // LEFT OFF HERE WITH ADDING INVERT FUNCTION
                Console.WriteLine();
                Stopwatch perfTimer1 = new(), perfTimer2 = new();
                long perfTimerTotal1 = 0, perfTimerTotal2 = 0;
                //BigInteger valToTest = BigInteger.Parse("17000000000000000000");
                BigInteger valToTest = BigInteger.Parse("17000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
                //BigInteger valToTest = BigInteger.Parse("54423786437031527763697912279787023177007175773396983622816024035711543468387091978597056733234710315130549820241594446393756345612424802270801471745336113250193667718316040253941103853841621774234813857891663076076715068586343817309246770086732294883423415223673860597326831387240313092477650074951316685417593007167891273031148391605579769517420776570212699556110145652641739426307621148603418506166450038891744322262956504929671467272484497540453925091672914077693364778107681126835011311994757409261811224974104348895160386664369615480529461919450491798311706809949739817420025767850441857925");
                int OFFSET = 0;
                BigInteger xInvTst = 0, xInvRes = 0;
                //xInvRes = ToolsForOther.InverseBigInteger(0xFF, 7);
                //xInvTst = ToolsForOther.InverseBigIntegerClassic(0xFF, 7);
                //xInvRes = ToolsForOther.InverseBigInteger(0xFFFFFFFF, 32);
                //xInvRes = ToolsForOther.InverseBigIntegerClassic(0xFFFFFFFF, 32);
                //xInvRes = ToolsForOther.InverseBigInteger(0xFFFFFFFFFUL, 32 + 4);
                //xInvRes = ToolsForOther.InverseBigIntegerClassic(0xFFFFFFFFFUL, 32 + 4);
                //xInvRes = ToolsForOther.InverseBigInteger(0xFFFFFFFFFFFFFFFFUL, 64);
                //xInvRes = ToolsForOther.InverseBigIntegerClassic(0xFFFFFFFFFFFFFFFFUL, 64);
                //xInvRes = ToolsForOther.InverseBigInteger(BigInteger.Parse("1777777777777777777777"), 70);
                //xInvRes = ToolsForOther.InverseBigIntegerClassic(BigInteger.Parse("1777777777777777777777"), 70);
                //xInvRes = ToolsForOther.InverseBigInteger(BigInteger.Parse("1777777777777777777777777777777777777777777"), 140);
                //xInvRes = ToolsForOther.InverseBigIntegerClassic(BigInteger.Parse("1777777777777777777777777777777777777777777"), 140);


                for (int i = 0; i < 9700; i++)
                {
                    int valLen = 0;
                    perfTimerTotal1 += perfTimer1.ElapsedTicks; perfTimerTotal2 += perfTimer2.ElapsedTicks; perfTimer1.Reset(); perfTimer2.Reset();
                    for (int k = 0; k < 12800; k++)
                    {
                        valToTest += 1 + (valToTest / 7727); //(valToTest >> 5); //(valToTest / 100003); 127 251 503 997 7727  100003
                        valLen = (int)valToTest.GetBitLength() + OFFSET;
                        if (valLen < 0) continue;

                        GC.Collect();
                        if (k % 2 == 0)
                        {
                            perfTimer1.Start();
                            xInvTst = ToolsForOther.InverseBigIntegerClassic(valToTest, valLen);
                            perfTimer1.Stop();

                            perfTimer2.Start();
                            xInvRes = ToolsForOther.InverseBigInteger(valToTest, valLen);
                            perfTimer2.Stop();
                        }
                        else
                        {
                            perfTimer2.Start();
                            xInvRes = ToolsForOther.InverseBigInteger(valToTest, valLen);
                            perfTimer2.Stop();

                            perfTimer1.Start();
                            xInvTst = ToolsForOther.InverseBigIntegerClassic(valToTest, valLen);
                            perfTimer1.Stop();
                        }


                        if (xInvRes != xInvTst)
                        {
                            Console.WriteLine($"Input: {valToTest}\r\ni:{i}-k:{k,3} {xInvRes} != {xInvTst} ");

                            if (xInvRes.GetBitLength() != valLen)
                                Console.WriteLine($"i:{i}-k:{k,3} {xInvRes.GetBitLength()} != {valLen,-4}  {xInvTst} on Result");

                            if (xInvTst.GetBitLength() != valLen)
                                Console.WriteLine($"i:{i}-k:{k,3} {xInvTst.GetBitLength()} != {valLen,-4}  {xInvTst} on Classic");

                            int correctBits = ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count();
                            if ((xInvRes.GetBitLength() - correctBits) > 0)
                                Console.WriteLine($"i:{i}-k: CorrectBits:{correctBits} of {xInvRes.GetBitLength()}. x: {valToTest}");
                            Console.ReadKey();
                        }

                    }
                    long divideBy = (160 * 100 * Stopwatch.Frequency) / 1000000000;
                    int correct = ToolsForOther.ToBinaryString(xInvRes).Zip(ToolsForOther.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count();
                    Console.WriteLine($"{valLen,4} Ticks: {perfTimer1.ElapsedTicks / divideBy,4} -> {perfTimer2.ElapsedTicks / divideBy,4} ({(float)perfTimer1.ElapsedTicks / perfTimer2.ElapsedTicks,-12}) (Total: {(float)perfTimerTotal1 / perfTimerTotal2,-12}) Missed {xInvRes.GetBitLength() - correct,4} of {xInvRes.GetBitLength()}");
                }
                Console.ReadKey();
            }
            
            //int precisionBits = finalSize;
            //BigInteger scalingFactor = BigInteger.One << precisionBits*2;

            //// Number of iterations (log2(precisionBits)) for convergence
            //int iterations = (int)Math.Ceiling(Math.Log(precisionBits) / Math.Log(2)) + 1;

            //// Initial approximation (can be improved)
            //BigInteger xInv = scalingFactor / (x);                     Console.WriteLine($"...{ToolsForOther.ToBinaryString(xInv)}[{xInv.GetBitLength()}] ");

            //for (int i = 0; i < iterations; i++)
            //{
            //    // y = y * (2 * scalingFactor - x * y) / scalingFactor
            //    BigInteger xTimesY = (x * xInv) >> precisionBits;
            //    BigInteger twoMinusXy = (BigInteger.One << 1) * scalingFactor - xTimesY;
            //    xInv = (xInv * twoMinusXy) >> precisionBits;
            //    Console.WriteLine($"...{ToolsForOther.ToBinaryString(xInv)}[{xInv.GetBitLength()}] ");
            //}
            ////int xInv2Shift = (int)xInv2.GetBitLength() - 1 - xLen % 2;         //  x: m-m+x 


            int counter = 0;
            do ////////  Divide-less Iterations  ////////
            {
                //int newSize2 = (size << 1) - t;
                BigInteger xInvShift2 = xInv >> (xInv2Shift - (size << 1));
                BigInteger xInvShift1 = xInv >> (xInv2Shift - (size << 1));
                //BigInteger xInvShift = xInv >> (xLen - (size << 1));
                //if (((xInv2Shift - (size << 1)) < 0))
                //    Console.WriteLine($"{size} : {(xInv2Shift - (size << 1))}");
                if (xInvShift1 != xInvShift2)
                {
                    Console.WriteLine($"...{ToolsForOther.ToBinaryString(xInvShift1 & 0xFFFF)}[{xInvShift1.GetBitLength()}] ...{ToolsForOther.ToBinaryString(xInvShift2 & 0xFFFF)}[{xInvShift2.GetBitLength()}]");
                }
                //Console.WriteLine($"{(xInv2Size - (size << 1))}");

                BigInteger valSqrd = BigInteger.Pow(val, 2);

                BigInteger rightSide = (THREE << (2 * size)) - ((xInvShift2 * valSqrd) << (-2 * size));
                val = (val * rightSide) >> (size + 1);
                size *= 2;

                //val++;
                val >>= EXTRA_BITS_TO_REMOVE; size -= EXTRA_BITS_TO_REMOVE;

                counter++;
            } while (size < wantedPrecision);
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;

        ////////  Detect a round-ups  ////////
        BigInteger origVal = val;
        BigInteger tmp = val * val;
        if (tmp > x)
        {
            val--;
            tmp = val * val;
            if (tmp > x)
            {
                val--;
            }
        }
        else if ((tmp + 2 * val + 1) <= x)
        {
            val++;
            tmp = val * val;
            if ((tmp + 2 * val + 1) <= x)
            {
                val++;
            }
        }
        //else
        //{
        //    int loops = 0;
        //    while ((val + 1) * (val+1) <= x)
        //    {
        //        val++;
        //        loops++;
        //    }
        //    if (loops > 0) Console.WriteLine($"loops:{loops}");//  val:{origVal} --> {val}");
        //}


        //else
        //{
        //    BigInteger valTimes2 = val << 1;
        //    BigInteger plus1Sqrd = tmp + valTimes2 + 1;
        //    if (plus1Sqrd <= x)
        //    {
        //        val++;
        //        if ((plus1Sqrd + valTimes2 + 3) <= x)
        //            val++;
        //    }
        //}


        //////// Error Detection ////////
        ////I believe the above has no errors but to guarantee the following can be added.
        //// If an error is found, please report it.
        //tmp = val * val;
        //if (tmp > x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo High of result...\r\n" +
        //        $"val^2({tmp})\r\n" +
        //        $" > \r\n" +
        //        $" Sqrt({x})");
        //    //Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
        //}
        //else if ((tmp + 2 * val + 1) <= x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo Low of result...\r\n" +
        //        $"(val+1)^2({(tmp + 2 * val + 1)})\r\n" +
        //        $" <= \r\n" +
        //        $"     Sqrt({x})");
        //}

        return val;
    }

    public static BigInteger NoDivSqrt5(BigInteger x, bool SHOW = false) // NoDivSqrt5
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        if (xAsDub < 4.3322e127)
        {
            BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
            v = (v + (x / v)) >> 1;
            if (xAsDub > 2e63)
            {
                v = (v + (x / v)) >> 1;
            }
            return (v * v <= x) ? v : v - 1;
        }

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;

        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }
        
        ////////  Classic Newton Iterations ////////
        BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        int size = 106;
        for (; size < 256; size <<= 1)
        {
            val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        }
        //Console.WriteLine($"Val:{ToolsForOther.ToBinaryString(val)}[{val.GetBitLength()}]");


        if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {
            const int t = 4;

            ////////  Apply Starting Size  ////////
            //int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 1; // should we remove the +2?
            //int startingSize = (wantedPrecision >> numOfNewtonSteps) + 1;// - (size & 1);  
            ////int predictedSize = (size<< numOfNewtonSteps) - wantedPrecision;

            //int numOfNewtonSteps = 2; int startingSize = (wantedPrecision >> 2) + 3;
            int startingSize = wantedPrecision;
            int numOfNewtonSteps = 0;
            while (startingSize > size)
            {
                startingSize = ((startingSize + t) / 2) + 1 ;
                numOfNewtonSteps++;
                //Console.WriteLine($"{numOfNewtonSteps}: startingSize:{startingSize}");
            }

            
            int needToShiftBy = size - startingSize;
            val >>= needToShiftBy;

            size = startingSize;
            
            //////// Get the Inverse of X ////////
            int finalSize = (size << numOfNewtonSteps);
            BigInteger mag2 = BigInteger.One << (2 * finalSize);
            BigInteger xInv2 = mag2 / (x >> (xLen - finalSize));
            int xInv2Size = (int)xInv2.GetBitLength();
            //string answer
            //string answer

            //Console.WriteLine($"[A] missed last {val.GetBitLength() - ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");      //      Console.WriteLine($"");

            ////////  Divide-less Iterations  ////////
            do
            {
                int j = -0, k = 0, m = 0, p = 0, r = 0, s = 0;
                int newSize2 = (size << 1) - t;                                 
                BigInteger xInvShift2 = xInv2 >> (xInv2Size - newSize2 - j);  
                BigInteger valSqrd2 = BigInteger.Pow(val, 2);              
                BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize2 - s)) & ((BigInteger.One << (size + 7 + j + s)) - 1);
                if (rightSide2 >> (size - 1 + t) > 0)
                {
                    //Console.WriteLine($"Minus one for below"); 
                    val--;
                    continue;
                }
                val = (val << (size + j + k + m - t)) | (((val << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s));  //845
                //Console.WriteLine($"[B] missed last {val.GetBitLength() - ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                size = newSize2;  //424 -> 848
            } while (size < wantedPrecision) ;
            //Console.WriteLine($"shiftt: {shiftt}  size:{size}   wantedPrecision:{wantedPrecision} ({predictedSize,3})");

            //Console.WriteLine(size / 2);

            //if ((size - wantedPrecision) > (size / 4))
            //    Console.WriteLine($"Oversized!  size: {size}  wantedPrecision:{wantedPrecision}");
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;

        //Console.WriteLine($"Val:{ToolsForOther.ToBinaryString(val)}[{val.GetBitLength()}]");
        //Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd2)}[{valSqrd2.GetBitLength()}]");
        //Console.WriteLine($"R={ToolsForOther.ToBinaryString(rightSide2)}");
        //Console.WriteLine($"xInvShift2: {xInvShift2.GetBitLength()}  valSqrd2: {valSqrd2.GetBitLength()}");
        //Console.WriteLine($"{(size + j + k + m - t)} == {(((val2 << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s)).GetBitLength()}");
        //Console.WriteLine($"{((rightSide2) >> (size - 1 + t))}");
        //Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
        //Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
        //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
        //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
        //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
        //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
        //Console.WriteLine($"Last bits of val2:{ToolsForOther.ToBinaryString(val2 & 0xFF),8} [{val2.GetBitLength() - newSize2}]");
        //Console.WriteLine($"Last bits of rightSide2:{ToolsForOther.ToBinaryString(rightSide2 & 0xFF),8} [{rightSide2.GetBitLength() - size}]");
        //Console.WriteLine($"Last bits of valSqrd2:  {ToolsForOther.ToBinaryString(valSqrd2 & 0xFF),8} [{valSqrd2.GetBitLength() - newSize2}]");
        //Console.WriteLine($"Last bits of xInvShift2:{ToolsForOther.ToBinaryString(xInvShift2 & 0xFF),8} [{xInvShift2.GetBitLength() - newSize2}]");

        ////////  Detect a round-ups  ////////
        //if ((saveDroppedDigits == 0) && (val * val > x))   val--;
        BigInteger origVal = val;
        BigInteger tmp = val * val;
        int loops = 0;
        if (tmp > x)
        {
            val--;
            loops++;
        }
        else if (tmp + (val << 1) + 1 <= x)
        {
            val++;
            loops++;
            //while ((val + 1) * (val + 1) <= x)
            //{
            //    val++;
            //    loops++;
            //}
        }
        //if (loops > 1000) Console.WriteLine($"loops:{loops}");//  val:{origVal} --> {val}");

        //////// Error Detection ////////
        // I believe the above has no errors but to guarantee the following can be added.
        // If an error is found, please report it.
        //tmp = val * val;
        //if (tmp > x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo High of result...\r\n" +
        //        $"val^2({tmp})\r\n" +
        //        $" > \r\n" +
        //        $" Sqrt({x})");
        //    //Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
        //}
        //else if ((tmp + 2 * val + 1) <= x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo Low of result...\r\n" +
        //        $"(val+1)^2({(tmp + 2 * val + 1)})\r\n" +
        //        $" <= \r\n" +
        //        $"     Sqrt({x})");
        //}

        return val;
    }

    public static BigInteger NoDivSqrt4(BigInteger x, bool SHOW = false) //NoDivSqrt4
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        if (xAsDub < 4.3322e127)
        {
            BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
            v = (v + (x / v)) >> 1;
            if (xAsDub > 2e63)
            {
                v = (v + (x / v)) >> 1;
            }
            return (v * v <= x) ? v : v - 1;
        }

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;

        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }
        //Console.WriteLine();
        ////////  Classic Newton Iterations ////////
        BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        int size = 106;
        for (; size < 256; size <<= 1)
        {
            val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        }
        Console.WriteLine($"Val:{ToolsForOther.ToBinaryString(val)}[{val.GetBitLength()}]");

        if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {

            // add some extra bits that can be removed in each round
            wantedPrecision += BitOperations.Log2((uint)wantedPrecision);

            int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 1; // should we remove the +2?



            ////////  Apply Starting Size  ////////
            int startingSize = (wantedPrecision >> numOfNewtonSteps) + 1;// - (size & 1);  
            int needToShiftBy = size - startingSize;
            val >>= needToShiftBy;
            size = startingSize;
            int predictedSize = (size<< numOfNewtonSteps) - wantedPrecision;

            const int  f=1;
            int c = (xLen >> 1);

            BigInteger val2 = val;
            Console.WriteLine($"Val:{ToolsForOther.ToBinaryString(val)}[{val.GetBitLength()}]");

            //////// Get the Inverse of X ////////
            int finalSize = (size << numOfNewtonSteps);
            BigInteger mag = BigInteger.One << (xLen + (((xLen & 0x01) == 0) ? 0 : 1) - f);
            BigInteger xInv = mag / (x >> (xLen / 2 + f));

            BigInteger mag2 = BigInteger.One << (2*finalSize);
            BigInteger xInv2 = mag2 / (x>> (xLen - finalSize));
            int xInv2Size = (int)xInv2.GetBitLength();
            //string answer

            //Console.WriteLine($"[A] missed last {val2.GetBitLength() - ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");

            int shiftt; Console.WriteLine($"");
            do ////////  Divide-less Iterations  ////////
            {

                    //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                    int newSize = (size << 1);                                    // working size 258 (val is 258, size is correct )
                    BigInteger xInvShift = xInv >> (-newSize + c);
                    BigInteger valSqrd = BigInteger.Pow(val, 2);
                    //Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd)}[{valSqrd.GetBitLength()}]");
                    BigInteger rightSide = ((BigInteger)3 << (newSize)) - ((xInvShift * valSqrd) >> newSize);
                    // 845 * 847 >> (?-3) = 424 
                    val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                    //Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                    //Console.WriteLine($"[-] missed last {val.GetBitLength() - ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                    size = newSize;  //424 -> 848

                //{
                //    int j = -0, k = 0, m = 0, p = 0, r = 0, s = 0;
                //    //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                //    int t = 2;
                //    int newSize = (size << 1) - t;                                    // working size 258 (val is 258, size is correct )
                //    BigInteger xInvShift = xInv >> (-newSize + c);
                //    BigInteger xInvShift2 = xInv2 >> (xInv2Size - newSize - j);  // 845 (half bit to much)
                //    BigInteger valSqrd = BigInteger.Pow(val, 2);
                //    BigInteger valSqrd2 = BigInteger.Pow(val2, 2);              // 847 
                //    Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd)}[{valSqrd.GetBitLength()}]");
                //    BigInteger rightSide = ((BigInteger)3 << (newSize)) - ((xInvShift * valSqrd) >> newSize);
                //    BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize - s)) & ((BigInteger.One << (size + 7 + j + s)) - 1);
                //    // 845 * 847 >> (?-3) = 424 
                //    //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
                //    //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
                //    //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
                //    //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
                //    val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                //    val2 = (val2 << (size + j + k + m - t)) | ((val2 << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s);  //845
                //    //           848 *  427
                //    Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                //    Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
                //    Console.WriteLine($"[B] missed last {val2.GetBitLength() - ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                //    size = newSize;  //424 -> 848
                //}

                //if (size >= wantedPrecision) break;
                //{
                //    int j = -0, k = 0, m = 0, p = 0, r = 0, s = 0;
                //    //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                //    int t = 2;
                //    int newSize = (size << 1) - t;                                    // working size 258 (val is 258, size is correct )
                //    BigInteger xInvShift = xInv >> (-newSize + c);
                //    BigInteger xInvShift2 = xInv2 >> (xInv2Size - newSize - j);  // 845 (half bit to much)
                //    BigInteger valSqrd = BigInteger.Pow(val, 2);
                //    BigInteger valSqrd2 = BigInteger.Pow(val2, 2);              // 847 
                //    Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd)}[{valSqrd.GetBitLength()}]");
                //    BigInteger rightSide = ((BigInteger)3 << (newSize)) - ((xInvShift * valSqrd) >> newSize);
                //    BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize - s)) & ((BigInteger.One << (size + 7 + j + s)) - 1);
                //    // 845 * 847 >> (?-3) = 424 
                //    //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
                //    //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
                //    //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
                //    //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
                //    val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                //    val2 = (val2 << (size + j + k + m - t)) | ((val2 << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s);  //845
                //    //           848 *  427
                //    Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                //    Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
                //    Console.WriteLine($"[B] missed last {val2.GetBitLength() - ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                //    size = newSize;  //424 -> 848
                //}

                //if (size >= wantedPrecision) break;

                //{
                //    int j = -0, k = 0, m = 0, p = 0, r = 0, s = 0;
                //    //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                //    int t = 2;
                //    int newSize = (size << 1) - t;                                    // working size 258 (val is 258, size is correct )
                //    BigInteger xInvShift = xInv >> (-newSize + c);
                //    BigInteger xInvShift2 = xInv2 >> (xInv2Size - newSize - j);  // 845 (half bit to much)
                //    BigInteger valSqrd = BigInteger.Pow(val, 2);
                //    BigInteger valSqrd2 = BigInteger.Pow(val2, 2);              // 847 
                //    Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd)}[{valSqrd.GetBitLength()}]");
                //    BigInteger rightSide = ((BigInteger)3 << (newSize)) - ((xInvShift * valSqrd) >> newSize);
                //    BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize - s)) & ((BigInteger.One << (size + 7 + j + s)) - 1);
                //    // 845 * 847 >> (?-3) = 424 
                //    //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
                //    //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
                //    //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
                //    //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
                //    val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                //    val2 = (val2 << (size + j + k + m - t)) | ((val2 << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s);  //845
                //    //           848 *  427
                //    Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                //    Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
                //    Console.WriteLine($"[B] missed last {val2.GetBitLength() - ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                //    size = newSize;  //424 -> 848
                //}


                //if (size >= wantedPrecision) break;

                //{
                //    int j = -0, k = 0, m = 0, p = 0, r = 0, s = 0;
                //    //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                //    int t = 2;
                //    int newSize = (size << 1) - t;                                    // working size 258 (val is 258, size is correct )
                //    BigInteger xInvShift = xInv >> (-newSize + c);
                //    BigInteger xInvShift2 = xInv2 >> (xInv2Size - newSize - j);  // 845 (half bit to much)
                //    BigInteger valSqrd = BigInteger.Pow(val, 2);
                //    BigInteger valSqrd2 = BigInteger.Pow(val2, 2);              // 847 
                //    Console.WriteLine($"v^2 {ToolsForOther.ToBinaryString(valSqrd)}[{valSqrd.GetBitLength()}]");
                //    BigInteger rightSide = ((BigInteger)3 << (newSize)) - ((xInvShift * valSqrd) >> newSize);
                //    BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize - s)) & ((BigInteger.One << (size + 7 + j + s)) - 1);
                //    // 845 * 847 >> (?-3) = 424 
                //    //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
                //    //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
                //    //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
                //    //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
                //    val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                //    val2 = (val2 << (size + j + k + m - t)) | ((val2 << (k + r)) * (rightSide2 << p)) >> (size - 1 + t - m + p + r + s);  //845
                //    //           848 *  427
                //    Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                //    Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
                //    Console.WriteLine($"[B] missed last {val2.GetBitLength() - ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()} of {val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                //    size = newSize;  //424 -> 848
                //}



                //if (size >= wantedPrecision) break;
                //for (int _a = -1; _a < 2; _a++)
                //for (int _i = -1; _i < 2; _i++)
                //        for (int _p = -1; _p < 2; _p++)
                //    {
                //        //int j = -2, k = -2, m =-2, p = -2, r = -1, s = -2;
                //        int t = 2;
                //        int newSize = (size << 1) - t;                                    // working size 258 (val is 258, size is correct )
                //        BigInteger xInvShift2 = (xInv2 >> (xInv2Size - newSize + _i)) + (BigInteger)_p;  // 845 (half bit to much) 
                //        for (int _q = -1; _q < 2; _q++)
                //        {
                //            Console.WriteLine($"{_i} {_p} {_q}");
                //            BigInteger valSqrd2 = BigInteger.Pow(val2, 2) + (BigInteger)_q;              // 847 
                //            for (int _j = -1; _j < 2; _j++)
                //                for (int _k = -1; _k < 2; _k++)
                //                {
                //                    BigInteger rightSide2 = -((xInvShift2 * valSqrd2) >> (newSize + _j)) & ((BigInteger.One << (size + 7 + _k)) - 1);
                //                    for (int _l = -1; _l < 2; _l++)
                //                        for (int _n = -1; _n < 2; _n++)
                //                            for (int _m = -1; _m < 2; _m++)
                //                                for (int _r = -1; _r < 2; _r++)
                //                                    for (int _s = -1; _s < 2; _s++)
                //                                        for (int _t = -1; _t < 2; _t++)
                //                                        {

                //                                            // 845 * 847 >> (?-3) = 424 
                //                                            //Console.WriteLine($"  {ToolsForOther.ToBinaryString((BigInteger)3 << (newSize))}");
                //                                            //Console.WriteLine($" -{ToolsForOther.ToBinaryString((xInvShift2 * valSqrd) >> (newSize - 2))}");
                //                                            //Console.WriteLine($" ={ToolsForOther.ToBinaryString(rightSide)}");
                //                                            //Console.WriteLine($"a={ToolsForOther.ToBinaryString(rightSide2)}");
                //                                            //val = ((val >> 0) * (rightSide >> 0)) >> (size + 1);
                //                                            BigInteger _val2 = ((val2 << (size - t + _l)) + _r) - (((val2 << (_n)) + _t) * ((rightSide2) + _s)) >> (size - 1 + t + _m);  //845
                //                                                                                                                                                                                                                  //           848 *  427
                //                                                                                                                                                                                                                  //Console.WriteLine($"1:{ToolsForOther.ToBinaryString(val)}");
                //                                                                                                                                                                                                                  //Console.WriteLine($"2:{ToolsForOther.ToBinaryString(val2)}");
                //                                            int missed = (int)_val2.GetBitLength() - ToolsForOther.ToBinaryString(_val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count();
                //                                            if (missed < 3000)
                //                                                Console.WriteLine($"[B] missed last {missed} of {_val2.GetBitLength()} (Correct:{ToolsForOther.ToBinaryString(_val2).Zip(answer, (c1, c2) => c1 == c2).TakeWhile(b => b).Count()})");
                //                                            //size = newSize;  //424 -> 848
                //                                        }
                //                }
                //        }
                //    }


            } while (size < wantedPrecision);
            //Console.WriteLine($"shiftt: {shiftt}  size:{size}   wantedPrecision:{wantedPrecision} ({predictedSize,3})");



            //if ((size - wantedPrecision) > (size / 4))
            //    Console.WriteLine($"Oversized!  size: {size}  wantedPrecision:{wantedPrecision}");
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;


        // 7 * 7 = 49
        // 49 + 2*7 + 1 = 64 (8 * 8 = 64)
        // 64 + 2*7 + 3 = 81

        ////////  Detect a round-ups  ////////
        //if ((saveDroppedDigits == 0) && (val * val > x))   val--;
        BigInteger origVal = val;
        BigInteger tmp = val * val;
        int loops = 0;
        if (tmp > x)
        {
            val--;
            loops++;
        }
        else if (tmp + (val << 1) + 1 <= x)
        {
            val++;
            loops++;
            //while ((val + 1) * (val + 1) <= x)
            //{
            //    val++;
            //    loops++;
            //}
        }
        //if (loops > 1000) Console.WriteLine($"loops:{loops}");//  val:{origVal} --> {val}");

        //////// Error Detection ////////
        // I believe the above has no errors but to guarantee the following can be added.
        // If an error is found, please report it.
        //tmp = val * val;
        //if (tmp > x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo High of result...\r\n" +
        //        $"val^2({tmp})\r\n" +
        //        $" > \r\n" +
        //        $" Sqrt({x})");
        //    //Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
        //}
        //else if ((tmp + 2 * val + 1) <= x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo Low of result...\r\n" +
        //        $"(val+1)^2({(tmp + 2 * val + 1)})\r\n" +
        //        $" <= \r\n" +
        //        $"     Sqrt({x})");
        //}

        return val;
    }

    public static BigInteger NoDivSqrt3(BigInteger x, bool SHOW = false)
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        if (xAsDub < 4.3322e127)
        {
            BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
            v = (v + (x / v)) >> 1;
            if (xAsDub > 2e63)
            {
                v = (v + (x / v)) >> 1;
            }
            return (v * v <= x) ? v : v - 1;
        }

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;

        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }

        ////////  Classic Newton Iterations ////////
        BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        int size = 106;
        for (; size < 256; size <<= 1)
        {
            val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        }

        if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {
            int EXTRA_BITS_TO_REMOVE = 2;

            ////////  Apply Starting Size  ////////
            //int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 2;
            //int wantedSize = (wantedPrecision >> numOfNewtonSteps) + 2;
            int startingSize = wantedPrecision + 6;
            int numOfNewtonSteps = 0;
            while (startingSize > size)
            {
                startingSize = ((startingSize + EXTRA_BITS_TO_REMOVE) / 2) + 1;
                numOfNewtonSteps++;
            }

            int needToShiftBy = size - startingSize;
            val >>= needToShiftBy;
            size = startingSize;

            //////// Get the Inverse of X ////////
            int magShift = 2 * xLen - (((xLen & 0x01) == 0) ? 0 : -1);
            BigInteger mag = BigInteger.One << magShift;
            BigInteger xInv = mag / x;
            BigInteger THREE = ((BigInteger)3);


            int counter = 0;
            do ////////  Divide-less Iterations  ////////
            {
                BigInteger xInvShift = xInv >> (xLen - (2 * size));
                BigInteger valSqrd = val * val;

                BigInteger rightSide = (THREE << (2 * size)) - ((xInvShift * valSqrd) << (-2 * size));
                val = (val * rightSide) >> (size + 1);
                size *= 2;

                //val++;
                val >>= EXTRA_BITS_TO_REMOVE;  size -= EXTRA_BITS_TO_REMOVE;

                counter++;
            } while (size < wantedPrecision);
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;


        // 7 * 7 = 49
        // 49 + 2*7 + 1 = 64 (8 * 8 = 64)
        // 64 + 2*7 + 3 = 81

        ////////  Detect a round-ups  ////////
        BigInteger origVal = val;
        BigInteger tmp = val * val;
        if (tmp > x)
        {
            val--;
            tmp = val * val;
            if (tmp > x)
            {
                val--;
            }
        }
        else if ((tmp + 2 * val + 1) <= x)
        {
            val++;
            tmp = val * val;
            if ((tmp + 2 * val + 1) <= x)
            {
                val++;
            }
        }
        //else
        //{
        //    int loops = 0;
        //    while ((val + 1) * (val+1) <= x)
        //    {
        //        val++;
        //        loops++;
        //    }
        //    if (loops > 0) Console.WriteLine($"loops:{loops}");//  val:{origVal} --> {val}");
        //}


        //else
        //{
        //    BigInteger valTimes2 = val << 1;
        //    BigInteger plus1Sqrd = tmp + valTimes2 + 1;
        //    if (plus1Sqrd <= x)
        //    {
        //        val++;
        //        if ((plus1Sqrd + valTimes2 + 3) <= x)
        //            val++;
        //    }
        //}


        //////// Error Detection ////////
        ////I believe the above has no errors but to guarantee the following can be added.
        //// If an error is found, please report it.
        //tmp = val * val;
        //if (tmp > x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo High of result...\r\n" +
        //        $"val^2({tmp})\r\n" +
        //        $" > \r\n" +
        //        $" Sqrt({x})");
        //    //Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
        //}
        //else if ((tmp + 2 * val + 1) <= x)
        //{
        //    Console.WriteLine(
        //        $"\r\nToo Low of result...\r\n" +
        //        $"(val+1)^2({(tmp + 2 * val + 1)})\r\n" +
        //        $" <= \r\n" +
        //        $"     Sqrt({x})");
        //}

        return val;
    }

    public static BigInteger NoDivSqrt2(BigInteger x, bool SHOW = false)
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        if (xAsDub < 4.3322e127)
        {
            BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
            v = (v + (x / v)) >> 1;
            if (xAsDub > 2e63)
            {
                v = (v + (x / v)) >> 1;
            }
            return (v * v <= x) ? v : v - 1;
        }

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;


        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }

        //////  Classic Newton Iterations ////////
        BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        int size = 106;
        for (; size < 256; size <<= 1)
        {
            val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        }

        //BigInteger val = valLong; //temp
        //int size = 53; //temp

   

        //if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {
            //////// Get the Inverse of X ////////
            int magShift = (2 * xLen - 1);
            BigInteger mag = BigInteger.One << magShift;
            BigInteger xInv = mag / x;
            int t = ((xLen & 0x01) == 0) ? 1 : 0;// << (xLen/2 - 1); // some starting amount
            BigInteger THREE = ((BigInteger)3);


            int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 2;

            ////////  Apply Starting Size  ////////
            int wantedSize = (wantedPrecision >> numOfNewtonSteps) + 2;
            int needToShiftBy = size - wantedSize;
            val >>= needToShiftBy;
            size = wantedSize;




            int counter = 0;
            do
            {
                BigInteger preVal = val;
                int halfSize = size / 2;

                int raise_XInv_AND_Val2_Offset = halfSize;
                int raiseSubOffset = -2;
                int rightSideSubOffset = 0;

                int THREEoFF = 2 * size + t + raiseSubOffset;
                int xInvShiftOFF = xLen - size - halfSize - raise_XInv_AND_Val2_Offset; //LEFT OFF HERE ADDING the "2 *" on the size
                int valSqrdOFF = halfSize - 2 - raise_XInv_AND_Val2_Offset;
                int xInv_x_val2OFF =  size - raiseSubOffset + (2 * raise_XInv_AND_Val2_Offset);
                int finalOff = size - 1 + t; 

                ////////  Divide-less Iterations  ////////
                BigInteger three = THREE << THREEoFF;
                BigInteger xInvShift = xInv >> xInvShiftOFF;
                BigInteger valSqrd = (val * val) >> valSqrdOFF;
                BigInteger xInv_x_val2 = (xInvShift * valSqrd) >> xInv_x_val2OFF;
                BigInteger rightSide = (three - xInv_x_val2) >> rightSideSubOffset;
                val = (val * rightSide) >> finalOff;



                size *= 2;
                counter++;

                val >>= 2;
                size -= 2;

            } while (size < wantedPrecision+4);
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;
        BigInteger saveDroppedDigitsBI = val & ((BigInteger.One << oversidedBy) - 1);
        int downby = (oversidedBy < 64) ? (oversidedBy >> 2) + 1 : (oversidedBy - 32);
        ulong saveDroppedDigits = (ulong)(saveDroppedDigitsBI >> downby);


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;


        // 7 * 7 = 49
        // 49 + 2*7 + 1 = 64 (8 * 8 = 64)
        // 64 + 2*7 + 3 = 81

        ////////  Detect a round-ups  ////////
        //if ((saveDroppedDigits == 0) && (val * val > x))   val--;
        BigInteger origVal = val;
        BigInteger tmp = val * val;
        if (tmp > x)
        {
            val--;
        }
        else if (tmp + val<<1 + 1 <= 0)
        {
            val++;
        }
        //else
        //{
        //    int loops = 0;
        //    while ((val + 1) * (val+1) <= x)
        //    {
        //        val++;
        //        loops++;
        //    }
        //    if (loops > 0) Console.WriteLine($"loops:{loops}");//  val:{origVal} --> {val}");
        //}


        //else
        //{
        //    BigInteger valTimes2 = val << 1;
        //    BigInteger plus1Sqrd = tmp + valTimes2 + 1;
        //    if (plus1Sqrd <= x)
        //    {
        //        val++;
        //        if ((plus1Sqrd + valTimes2 + 3) <= x)
        //            val++;
        //    }
        //}


        //////// Error Detection ////////
        // I believe the above has no errors but to guarantee the following can be added.
        // If an error is found, please report it.
        tmp = val * val;
        if (tmp > x)
        {
            Console.WriteLine(
                $"\r\nToo High of result...\r\n" +
                $"val^2({tmp})\r\n" +
                $" > \r\n" +
                $" Sqrt({x})");
            //Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
            //if (saveDroppedDigitsBI.GetBitLength() >= 6)
            //    Console.WriteLine($"val^2 ({tmp}) < x({x})  off by:{((double)(tmp)) / (double)x}%");
            //throw new Exception("Sqrt function had internal error - value too high");
        }
        else if ((tmp + 2 * val + 1) <= x)
        {
            Console.WriteLine(
                $"\r\nToo Low of result...\r\n" +
                $"(val+1)^2({(tmp + 2 * val + 1)})\r\n" +
                $" <= \r\n" +
                $"     Sqrt({x})");
            //throw new Exception("Sqrt function had internal error - value too low");

        }
        else
        {
            //Console.WriteLine($"Pass");
        }
    

        return val;
    }

    //4/3/2022 4:30
    public static BigInteger NoDivSqrt1(BigInteger x)
    {
        if (x < 144838757784765629)    // 1.448e17 = ~1<<57
        {
            uint vInt = (uint)Math.Sqrt((ulong)x);
            if ((x >= 4503599761588224) && ((ulong)vInt * vInt > (ulong)x))  // 4.5e15 =  ~1<<52
            {
                vInt--;
            }
            return vInt;
        }

        double xAsDub = (double)x;
        if (xAsDub < 8.5e37)   //  long.max*long.max
        {
            ulong vInt = (ulong)Math.Sqrt(xAsDub);
            BigInteger v = (vInt + ((ulong)(x / vInt))) >> 1;
            return (v * v <= x) ? v : v - 1;
        }

        //if (xAsDub < 4.3322e127)
        //{
        //    BigInteger v = (BigInteger)Math.Sqrt(xAsDub);
        //    v = (v + (x / v)) >> 1;
        //    if (xAsDub > 2e63)
        //    {
        //        v = (v + (x / v)) >> 1;
        //    }
        //    return (v * v <= x) ? v : v - 1;
        //}

        int xLen = (int)x.GetBitLength();
        int wantedPrecision = (xLen + 1) / 2;
        int xLenMod = xLen + (xLen & 1) + 1;


        //////// Do the first Sqrt on hardware ////////
        long tempX = (long)(x >> (xLenMod - 63));
        double tempSqrt1 = Math.Sqrt(tempX);
        ulong valLong = (ulong)BitConverter.DoubleToInt64Bits(tempSqrt1) & 0x1fffffffffffffL;
        if (valLong == 0)
        {
            valLong = 1UL << 53;
        }

        ////////  Classic Newton Iterations ////////
        //BigInteger val = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        //int size = 106;
        //for (; size < 256; size <<= 1)
        //{
        //    val = (val << (size - 1)) + (x >> xLenMod - (3 * size)) / val;
        //}

        BigInteger val = valLong; //temp
        int size = 53; //temp
        BigInteger first106 = ((BigInteger)valLong << 52) + (x >> xLenMod - (3 * 53)) / valLong;
        BigInteger first212 = (first106 << 105) + (x >> xLenMod - (3 * 106)) / first106;


        //if (xAsDub > 4e254) // 4e254 = 1<<845.76973610139
        {
            //////// Get the Inverse of X ////////
            int magShift = (2 * xLen - 1);
            BigInteger mag = BigInteger.One << magShift;
            BigInteger xInv = mag / x;
            int t = ((xLen & 0x01) == 0) ? 1 : 0;// << (xLen/2 - 1); // some starting amount
            BigInteger THREE = ((BigInteger)3);


            int numOfNewtonSteps = BitOperations.Log2((uint)(wantedPrecision / size)) + 2;

            ////////  Apply Starting Size  ////////
            int wantedSize = (wantedPrecision >> numOfNewtonSteps) + 2;
            int needToShiftBy = size - wantedSize;
            val >>= needToShiftBy;
            size = wantedSize;


            Console.WriteLine($"{ToolsForOther.ToBinaryString(val)} [{val.GetBitLength()} = {size}] t:{t}\r\n");

            int counter = 0;
            do
            {
                BigInteger preVal = val;
                int halfSize = size / 2;


                int raise_XInv_AND_Val2_Offset = new List<int> { 11, 19, 40 }[counter];
                int raiseSubOffset = new List<int> { -2, -2, -2 }[counter];
                int rightSideSubOffset = new List<int> { 0, 0, 0 }[counter];

                int THREEoFF = (2 * size + t - 0) + raiseSubOffset;
                int xInvCroppedOFF = (xLen - size - halfSize + 0) - raise_XInv_AND_Val2_Offset;
                int valSqrdOFF = (halfSize - 2) - raise_XInv_AND_Val2_Offset;
                int xInv_x_val2OFF = (1 * size) - raiseSubOffset + (2 * raise_XInv_AND_Val2_Offset);
                ////////  Divideless Iterations  ////////

                BigInteger three = THREE << THREEoFF;
                BigInteger xInvCropped = xInv >> xInvCroppedOFF;
                BigInteger valSqrd = (preVal * preVal) >> valSqrdOFF;
                BigInteger xInv_x_val2 = (xInvCropped * valSqrd) >> xInv_x_val2OFF;
                BigInteger rightSide = three - xInv_x_val2 >> rightSideSubOffset;
                val = ((preVal >> 0) * (rightSide >> 0)) >> (size - 1);

                Console.WriteLine($"Size: {size}  T: {t} ");
                Console.WriteLine($"three         ({Bits(three)} <<{THREEoFF}");
                Console.WriteLine($"xInvCropped         ({Bits(xInvCropped)} >>{xInvCroppedOFF}");
                Console.WriteLine($"valSqrd            * {Bits(valSqrd)})  >>{valSqrdOFF}");
                Console.WriteLine($"xInv_x_val2     -{Bits(xInv_x_val2)} )  >>{xInv_x_val2OFF}");
                Console.WriteLine($"rightSide      {Bits(rightSide)}");
                Console.WriteLine($"preVal    * {Bits(preVal)} )");
                Console.WriteLine($"val       = {Bits(val)} )");
                Console.WriteLine($"first106    {Bits(first212 >> 30)} )");
                //Console.WriteLine($"           [0]2345678[1]2345678[2]2345678[3]2345678[4]2345678[5]2345678[6]23456789");
                BigInteger leftSizeOfz2 = val >> ((int)val.GetBitLength() - 200);
                BigInteger rightSizeOfz2 = first212 >> (212 - 200);
                int bits = 200 - 1 - (int)(BigInteger.Log10(BigInteger.Abs(leftSizeOfz2 - rightSizeOfz2)) * 3.3219280948873623478703194294894);

                Console.WriteLine($"BIT: { bits}");
                Console.WriteLine($"====================================");

                size *= 2;
                counter++;
            } while (size < wantedPrecision);
        }

        /////// There are a few extra digits here, lets save them ///////
        int oversidedBy = size - wantedPrecision;
        BigInteger saveDroppedDigitsBI = val & ((BigInteger.One << oversidedBy) - 1);
        int downby = (oversidedBy < 64) ? (oversidedBy >> 2) + 1 : (oversidedBy - 32);
        ulong saveDroppedDigits = (ulong)(saveDroppedDigitsBI >> downby);


        ////////  Shrink result to wanted Precision  ////////
        val >>= oversidedBy;


        ////////  Detect a round-ups  ////////
        if ((saveDroppedDigits == 0) && (val * val > x))
        {
            val--;
        }

        //////// Error Detection ////////
        // I believe the above has no errors but to guarantee the following can be added.
        // If an error is found, please report it.
        BigInteger tmp = val * val;
        if (tmp > x)
        {
            Console.WriteLine($"Missed  , {ToolsForOther.ToBinaryString(saveDroppedDigitsBI, oversidedBy)}, {oversidedBy}, {size}, {wantedPrecision}, {saveDroppedDigitsBI.GetBitLength()}");
            if (saveDroppedDigitsBI.GetBitLength() >= 6)
                Console.WriteLine($"val^2 ({tmp}) < x({x})  off%:{((double)(tmp)) / (double)x}");
            //throw new Exception("Sqrt function had internal error - value too high");
        }
        if ((tmp + 2 * val + 1) <= x)
        {
            Console.WriteLine($"(val+1)^2({((val + 1) * (val + 1))}) >= x({x})");
            //throw new Exception("Sqrt function had internal error - value too low");
        }

        return val;
    }