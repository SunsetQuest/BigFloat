Going beyond significant digits (in binary/decimal)

-> I recently built a floating point class for large numbers, so I temporarily know this very well. =)

 - Pre notes:  4
     - No integers are used here. Integers have infinite precision. (not mentioned here)
	     - Example: A block weighs 123.4 kg. How much would 10 blocks weigh? 10.000000...  x 123.4 = 123.4

Decimal is not the best number base for precision... because of forced precision.
 - Binary has 3.3x better precision and, in some cases, perfect precision.
 - Binary can also be multiplied by 2,4,8 etc by just shifting

Learned that..
 - The significant digits taught in schools are roughly correct.
 - Multiply two numbers, and the result is the smaller of the two. This is close, but it's more complicated than that.
 - There is such a thing as partial precision.
     - 9999.9 is 5 digits but just adding 0.1 leads to a full 6 digits (10000.0)?  
	 - This is true if we are roughly approximating and rounding to the nearest whole digit.
	 - In reality, however, it would be... 
	     - dec: "1 + Log10(number)"   9999.9 -> 4.999995657  ;   10000.0 -> 5.0000
		 - bin: "1 +  Log2(number)"   1111.1 -> 3.954        ;   10000.0 -> 5.0000
		 
 - When adding numbers (greater than 0), you always gain precision. 
     2.1
    +1.5
	====
     3.6  (aka a range of 3.55 to 3.65)
     	 
	 - It looks like we gain 0 to 1 bits for binary and decimal.  
	     - decimal: 100+100=200    99+99=198
		 - binary:  100+100=1000   11+11=100   (BTW, more beautiful)
		 
	 - But do we get more precision??? Let's try the extremes to see what the highest and lowest would look like...
	         2.05    2.15
	        +1.45   +1.55
	        =====   =====
	         3.40 to 3.70  <-- range using extreme values
             3.55 to 3.65  <-- range from traditional precision (above)
	 
	 - The earlier classical one is an easy trap. They are for integers or decimals with perfect precision.
	     Example:
	        2.1000000...
           +1.5000000...
            ============
            3.6000000...

	 
 - When subtracting numbers (greater than 0), you always reduce the precision. 
     2.1        1000
    -1.5        -111	
	====        ====
     0.6           1
     	 
	 - result size will range from 1 to just under the length of the longest (we can lose almost all digits)
	     - decimal: 100+100=200    99+99=198
		 - binary:  100+100=1000   11+11=100   (BTW, more beautiful)

	 - But again, this is not correct. The extreme values look like...
	         2.05    2.15
	        -1.55   -1.45
	        =====   =====
	         0.5  to 0.7   <-- range using extreme values
             0.55 to 3.65  <-- range from traditional precision (above)
	 

	 
 - When multiplying numbers..
     - The number of significant digits is more complicated. 
	 - In grade school, they taught us the result should be smaller than the two. This is roughly correct but usually overestimates precision.
	 - The best way to figure out precision for an operation is to take the extreme cases. In this case, the smallest and largest.
	 - Say we multiply 12 and 17. For the smallest extreme, the 12 could be 11.5, and the 17 could be 16.5. Or the largest extreme would be 12.5 x 17.5.
	 
	  Simple Mult       Low Extream      High Extreme
          12               11.5              12.5
        x 17             x 16.5            x 17.5
       	====              =====             =====
         204              189.75            218.75   
       
	   So, we took two numbers of 2 digits of precision and ended up with no digits of precision. You can see here that the grade school "20" is very rough and estimates the precision. 

	   In a perfect world, we would keep track of the low and high values. (or the low and the distance to the larger value)
	   This is a critical point.  
	  
	   More Accurately, it would be...
	        204.25 +/- 14.5    (218.75 is not inclusive here)
		 or 189.75 to 218.75   (218.75 is not inclusive here)
		 or 189.75 + (0 to 29)  <-- I like this type as the "29" is just 12+17.
	  	 
		 
	 - result size will range from 1 to just under the length of the longest (we can lose almost all digits)
	     - decimal: 100+100=200    99+99=198
		 - binary:  100+100=1000   11+11=100   (note: more beautiful)
		 
	 - so, putting this into a formula, the range can be found by:
	     Low end:  A.low x B.low        (".low" is the lowest value it can represent. example: 3.4 would be 3.35)
		 High end: Low + A + B


 - When Dividing numbers...
     - Divide is just repeated subtraction and we can use high and low ranges also.
	 
	  Simple Mult       Low Extream      High Extreme
          12               11.5              12.5
        / 17             / 17.5            / 16.5
       	====              =====             =====
        0.705882352     0.6571428         0.7575757
		 

				   
 - Other stuff
     - How to perform operations with number ranges.
	     - For Multiply, for example, the lows  would be multiplied by lows
	     - For Multiply, for example, the highs would be multiplied by highs
 
 
     - Should we not round at .5??
	   I think 1.1 would round to 1, and 1.4 would round to 2.
	   so, when we say 12 x 17, we would be saying the ranges high and low ranges would be:
	       0: -.5 to .5
		   1:  .5 to 1.41421356 
		   2:  
		   3: 


    |-------|-------|-------|-------|-------|-------|-------|
   -2      -1       0       1       2       3       4       5
		              -1    0  .58  1 1.32 1.58     2     2.32
					     1+0/1   1+1/2   1+1/3   1+1/4
						   

		   12 3.585
		   17 4.0875

	 