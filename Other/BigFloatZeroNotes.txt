8/2023 

Zero = any dataInt that is LESS than 0:100000000, and also the shift results in a 0:100000000.

public bool IsZero => _size < ExtraHiddenBits && (Scale + _size - ExtraHiddenBits) < 0;



    //  IntData    Scale  Precision  Zero
    //1:111111111 << -2       1       N 
    //1:000000000 << -2       1       N
    //1:000000000 << -1       1       N
    //1:000000000 <<  0       1       N
    //0:111111111 << -1       0       N 
    //0:100000000 << -1       0       N
    //0:100000000 <<  0       0       N
    //0:011111111 << -1      -1       Y
    //0:011111111 <<  0      -1       Y (borderline)
    //0:011111111 <<  1      -1       N
    //0:001111111 <<  1      -2       Y (borderline)
    //0:001111111 <<  2      -2       N


======================================================
NUMBER         IS_ZERO   NOTES
1|1111... << 0   NO    
0|1111... << 0   NO    (rounds to 1)
0|0111... << 0   YES   (rounds to 0)
0|1000... << 1   NO    (rounds to 1)
0|0111... << 1   NO?   (rounds to 1 after shift?)
0|0100... << 1   NO?   (rounds to 1 after shift?)
0|0010... << 3   NO?   (rounds to 1)
0|0001... << 3   YES?  (rounds to 0)
0|1111... >> 1   YES?  (rounds to 0)
1|1111... >> 1   NO    (rounds to 1 from 0.11111)
0|1111... >> 1   NO    (round to 1 before shift)
0|0111... >> 1   YES   (rounds to 0)


======================================================
Notes on Zero 
  Zero has a "point of least precision", stored in _scale, but no size. Size is 0.
Examples:
           $1.00    -  $1.00   = $0.00
     Time: 2hr15min -  1hr     = 1hr
     Time: 2hr15min -  2hr     = 0hr
the avg of 3.3 mps  & -1.1 mps = 1.1 mps
the avg of 4.4 mps  &  0.0 mps = 2.2 mps
the avg of 4.4 mps  &  0.  mps = 2.  mps
the avg of 2.2 mps  & -2.2 mps = 0.0 mps
the avg of [2.0000] & -[2.0000]= .0000     ([2.0000] - [2.0000] / 2.000...  => .0000[] / 2.000... => .0000[] )
the avg of .0[200]  & -.0[200] = .0000     ( .0[200] - .0[200]  / 2.000...  => .0000[] / 2.000... => .0[]    )
the avg of [40]00   & -[20]00  = [10]00    ( [40]00  - [20]00   / 2.000...  =>  [20]00 / 2.000... => [10]00  )
the avg of [20]00   & -[20]00  =  [0]00    ( [20]00  - [20]00   / 2.000...  =>  [0]00  / 2.000... => [0]00   )
           [20]00   -  [20]00  =  [0]00 
           [49]00   +  [50]00  = [99]00
           [50]00   +  [50]00  = [100]00 
           [0]00    +  [1234]  = [12]00 
           [123].   -  [122].  = [1].
           [123]00  -  [122]00 = [1]00
           [12]00   *  [12]0   = [14]0000
           [1234]00 *  [12]00  = [15]000000
           [1234]00 -  [1234]00= [15]000000
           0.000000 *  10      = 00

