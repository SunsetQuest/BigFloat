Notes on Zero 
Created 2023
Updated 2/2024-RSW
Updated 1/2025-RSW

Zero = any dataInt that is LESS than 0:100000000 AND also the shift results in a 0:100000000.

Current: 
  bool IsZero => _size == 0 || ((_size + Scale) < ExtraHiddenBits && _size < ExtraHiddenBits);// (CURRENT - as of 1/2025)
Past versions:
  bool IsZero => DataBits.IsZero || (_size < (ExtraHiddenBits - 2) && (_size + Scale) < ExtraHiddenBits); // PAST 1/2025
  bool IsZero => _size < (ExtraHiddenBits - 2) && (_size + Scale) < ExtraHiddenBits;    // (PAST - as of 2/2024)
  bool IsZero => _size < ExtraHiddenBits && (Scale + _size - ExtraHiddenBits) < 0;      // (PAST - as of 8/2023)
  bool IsZero => (_size < ExtraHiddenBits-1) && (Scale + _size - ExtraHiddenBits) < 0;  // (PAST)


==================== 1/2025 Example with (ExtraHiddenBits being of size 8) ==================================
    IntData     Scale  Precision  Zero    Why
  1:00000000 << -2       1        ___    ___ (_size(9) < ExtraHiddenBits(8)-1) AND ___ (Scale(-2) + _size(9) < ExtraHiddenBits(8))
  1:00000000 << -1       1        ___    ___ (_size(9) < ExtraHiddenBits(8)-1) AND YES (Scale(-1) + _size(9) < ExtraHiddenBits(8))
  1:00000000 <<  0       1        ___    ___ (_size(9) < ExtraHiddenBits(8)-1) AND ___ (Scale( 0) + _size(9) < ExtraHiddenBits(8))
  0:10000000 << -1       0        ___    ___ (_size(8) < ExtraHiddenBits(8)-1) AND YES (Scale(-1) + _size(8) < ExtraHiddenBits(8))
  0:10000000 <<  0       0        ___    ___ (_size(8) < ExtraHiddenBits(8)-1) AND ___ (Scale( 0) + _size(8) < ExtraHiddenBits(8))
  0:10000000 <<  1       0        ___    ___ (_size(8) < ExtraHiddenBits(8)-1) AND ___ (Scale( 1) + _size(8) < ExtraHiddenBits(8))
  1:11111111 << -2       1        ___    ___ (_size(9) < ExtraHiddenBits(8)-1) AND YES (Scale(-2) + _size(9) < ExtraHiddenBits(8))
  1:11111111 << -1       1        ___    ___ (_size(9) < ExtraHiddenBits(8)-1) AND ___ (Scale(-1) + _size(9) < ExtraHiddenBits(8))
  0:11111111 << -1       0        ___    ___ (_size(8) < ExtraHiddenBits(8)-1) AND YES (Scale(-1) + _size(8) < ExtraHiddenBits(8))
  0:11111111 <<  0       0        ___    ___ (_size(8) < ExtraHiddenBits(8)-1) AND ___ (Scale( 0) + _size(8) < ExtraHiddenBits(8))
  0:01111111 << -1      -1        ___    ___ (_size(7) < ExtraHiddenBits(8)-1) AND YES (Scale(-1) + _size(7) < ExtraHiddenBits(8))                                    
  0:01111111 <<  0      -1        ___    ___ (_size(7) < ExtraHiddenBits(8)-1) AND YES (Scale( 0) + _size(7) < ExtraHiddenBits(8))
  0:01111111 <<  1      -1        ___    ___ (_size(7) < ExtraHiddenBits(8)-1) AND ___ (Scale( 1) + _size(7) < ExtraHiddenBits(8))
  0:00111111 <<  1      -2        YES    YES (_size(6) < ExtraHiddenBits(8)-1) AND YES (Scale( 1) + _size(6) < ExtraHiddenBits(8))
  0:00111111 <<  2      -2        ___    YES (_size(6) < ExtraHiddenBits(8)-1) AND ___ (Scale( 2) + _size(6) < ExtraHiddenBits(8))
  0:00011111 <<  2      -3        YES    YES (_size(5) < ExtraHiddenBits(8)-1) AND YES (Scale( 2) + _size(5) < ExtraHiddenBits(8))
  0:00011111 <<  3      -3        ___    YES (_size(5) < ExtraHiddenBits(8)-1) AND ___ (Scale( 3) + _size(5) < ExtraHiddenBits(8))
  0:00000000 << -1      -1        YES    YES (_size(0) < ExtraHiddenBits(8)-1) AND YES (Scale(-1) + _size(0) < ExtraHiddenBits(8))
  0:00000000 <<  0       0        YES    YES (_size(0) < ExtraHiddenBits(8)-1) AND YES (Scale( 0) + _size(0) < ExtraHiddenBits(8))
  0:00000000 <<  1       1        YES    YES (_size(0) < ExtraHiddenBits(8)-1) AND YES (Scale( 1) + _size(0) < ExtraHiddenBits(8))

======================================================
  NUMBER         IS_ZERO   NOTES
  1|1111... >> 1   NO    (round to 2 before shift)
  1|1111... << 0   NO    (is 2)
  0|1111... << 0   NO    (rounds to 1)
  0|1111... >> 1   NO    (rounds to 0)
  0|1111... >> 1   NO    (round to 1 before shift)
  0|1000... << 1   NO    (rounds to 1 - borderline case)
  0|0111... << 0   YES   (rounds to 0)
  0|0111... >> 1   YES   (rounds to 0)
  0|0111... << 1   NO    (rounds to 1)
  0|0100... << 1   NO    (rounds to 1 - borderline case)
  0|0010... << 3   NO    (is 1)
  0|0001... << 3   NO    (rounds to 0)


=========================================================================================
Observation: Zero has a point of least precision, stored in _scale, but no size. Since size is 0, the lower bound of the precision is the _scale.
=========================================================================================
Examples:
           $1.00    -  $1.00   = $0.00
     Time: 2hr15min -  1hr     = 1hr
     Time: 2hr15min -  2hr     = 0hr
the avg of 3.3 mps  & -1.1 mps = 1.1 mps
the avg of 4.4 mps  &  0.0 mps = 2.2 mps
the avg of 4.4 mps  &  0.  mps = 2.  mps
the avg of 2.2 mps  & -2.2 mps = 0.0 mps
the avg of [2.0000] & -[2.0000]= .0000     ([2.0000] - [2.0000] / 2.000...  => .0000[] / 2.000... => .0000[] )
the avg of .0[200]  & -.0[200] = .0000     ( .0[200] - .0[200]  / 2.000...  => .0000[] / 2.000... => .0[]    )
the avg of [40]00   & -[20]00  = [10]00    ( [40]00  - [20]00   / 2.000...  =>  [20]00 / 2.000... => [10]00  )
the avg of [20]00   & -[20]00  =  [0]00    ( [20]00  - [20]00   / 2.000...  =>  [0]00  / 2.000... => [0]00   )
           [20]00   -  [20]00  =  [0]00 
           [49]00   +  [50]00  = [99]00
           [50]00   +  [50]00  = [100]00 
           [0]00    +  [1234]  = [12]00 
           [123].   -  [122].  = [1].
           [123]00  -  [122]00 = [1]00
           [12]00   *  [12]0   = [14]0000
           [1234]00 *  [12]00  = [15]000000
           [1234]00 -  [1234]00= [15]000000
           0.000000 *  10      = 00

