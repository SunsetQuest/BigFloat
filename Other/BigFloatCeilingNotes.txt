 Notes on Ceiling and Floor functions
 
 Jan 2023, Feb 2023

     public BigFloat Ceiling2()
    {
        int bitsToClear = ExtraHiddenBits - Scale; // number of bits to clear from _int

        // 'Scale' will be zero or positive. (since all fraction bits are stripped away)
        // 'Size'  will be the size of the new integer part.
        // Precision of the decimal bits are stripped away. 

        // If bitsToClear <= 0, then all fraction bits are implicently zero and nothing needs to be done.
        //   Example: Scale = 32+7, int=45, size=6+32=38 -> bitsToClear=-7   -101101[10101010010...00010]0000000.
        if (bitsToClear <= 0) // Scale >= ExtraHiddenBits
        {
            return this;
        }

        // If less then zero, we can just return 1 for positive numbers and 0 for negitive.
        //   Example: Scale = -11, int=45, size=6+32=38  -> bitsToClear=32+11   -.00000 101101[10101010010...00010]
        if (bitsToClear >= _size)
        {
            return _int.Sign <= 0 ? new BigFloat(0, 0, 0) : new BigFloat(BigInteger.One << ExtraHiddenBits, 0, 1 + ExtraHiddenBits);
        }

        // Radix point is in the ExtraHiddenBits area
        //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  -101101[1010.1010010...00010]  -> -101101[1011.0000000...00000]
        if (Scale < ExtraHiddenBits) // SCALE >= 0 and SCALE<ExtraHiddenBits
        {
            // optimization here?
        }


        if (_int.Sign > 0)
        {
            //   If Positive and Ceiling, and the abs(result) is a PowerOfTwo the size will grow by 1.  -1111.1 -> -10000, -10000 -> -10000
            // Lets just remove the bits and clear ExtraHiddenBits
            //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  101101[1010.1010010...00010]  -> 101101[1010.0000000...00000]
            //   Example: Scale = -4, int=45, size=6+32=38  -> bitsToClear=32+4  10.1101[10101010010...00010]  -> 10.[00000000000...00000]

            // int newScale = ExtraHiddenBits - Math.Max(0, Scale);

            if (Scale >= 0) // Scale is between 0 and ExtraHiddenBits
            {
                //  Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  -101101[1010.1010010...00010]  -> -101101[1011.0000000...00000]
                bool roundsUp = (_int & ((1 << bitsToClear) - 1)) > 0;
                BigInteger intPart = _int >> bitsToClear << bitsToClear;
                int newSize = _size;

                if (roundsUp)
                {
                    intPart += 1 << (bitsToClear);
                    newSize = (int)intPart.GetBitLength(); //future: maybe slow (maybe use BigInteger.TrailingZeroCount to detect rollover)
                }
                return new BigFloat(intPart, Scale, newSize);
            }

            // If Scale is between -size and 0..
            //   Example: Scale = -4, int=45, size=6+32=38  -> bitsToClear=32+4  -11.1101[10101010010...00010]  -> -100.[00000000000...00000]
            else //if (Scale < 0)
            {
                // round up if any bits set between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) 
                bool roundsUp = (_int & ((((BigInteger)1 << ((ExtraHiddenBits / 2) - Scale)) - 1) << (ExtraHiddenBits / 2))) > 0;

                BigInteger intPart = _int >> bitsToClear << ExtraHiddenBits;

                if (roundsUp)
                {
                    intPart += BigInteger.One << ExtraHiddenBits;
                }

                int newSize = roundsUp ? (int)intPart.GetBitLength() : _size - bitsToClear + ExtraHiddenBits; //future: maybe slow (maybe use BigInteger.TrailingZeroCount to detect rollover)

                return new BigFloat(intPart, 0, newSize);
            }
        }
        else  // if (_int.Sign <= 0)
        {
            // If Negitive and Ceiling, the size should always remain the same.
            // If Scale is between 0 and ExtraHiddenBits..
            //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  101101[1010.1010010...00010]  -> 101101[1010.0000000...00000]
            if (Scale >= 0)
            {
                return new BigFloat((_int >> bitsToClear) << bitsToClear, Scale, _size);
            }

            //todo:  I think Size for something like -1111111111111111 might not be correct size (maybe)

            // If Scale is between -size and 0..
            //   Example: Scale = -4, int=45, size=6+32=38  -> bitsToClear=32+4  10.1101[10101010010...00010]  -> 10.[00000000000...00000]
            //return new BigFloat((_int >> bitsToClear) + (IsInteger ? 0 : 1));  //return new BigFloat((_int >> bitsToClear) + 1);    //return new BigFloat((_int >> (bitsToClear + 1)) << ExtraHiddenBits, 0, _size + Scale); // return new BigFloat(((_int >> bitsToClear) + 1) << ExtraHiddenBits, 0, _size + Scale);


            // round up if any bits set between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) 
            //bool roundsUp = (_int & ((((BigInteger)1 << (ExtraHiddenBits/2 - Scale)) - 1) << (ExtraHiddenBits / 2))) > 0;
            BigInteger intPart = _int >> bitsToClear;
            //todo:  I think Size for something like -1111111111111111 might not be correct size(maybe)

            if (!IsInteger)
            {
                intPart++;
            }

            //int newSize = IsInteger ? _size - bitsToClear + ExtraHiddenBits : (int)intPart.GetBitLength(); //future: maybe slow (maybe use BigInteger.TrailingZeroCount to detect rollover)

            return new BigFloat(intPart);
        }
    }


    public BigFloat Ceiling1()
    {
        int bitsToClear = ExtraHiddenBits - Scale; // number of bits to clear from _int

        // 'Scale' will be zero or positive. (since all fraction bits are stripped away)
        // 'Size'  will be the size of the new integer part.
        // Precision of the decimal bits are stripped away. 

        // If bitsToClear <= 0, then all fraction bits are implicently zero and nothing needs to be done.
        //   Example: Scale = 32+7, int=45, size=6+32=38 -> bitsToClear=-7   -101101[10101010010...00010]0000000.
        if (bitsToClear <= 0)
        {
            return this;
        }

        // If less then zero, we can just return 1 for positive numbers and 0 for negitive.
        //   Example: Scale = -11, int=45, size=6+32=38  -> bitsToClear=32+11   -.00000 101101[10101010010...00010]
        if (bitsToClear >= _size) // SCALE < 0 
        {
            if (_int.Sign <= 0)   //CHANGE >= to <=
            {
                return new BigFloat(0, 0, 0);
            }
            else
            {
                return new BigFloat(BigInteger.One << ExtraHiddenBits, 0, 1 + ExtraHiddenBits);  //CHANGE -BigInteger.One to BigInteger.One
            }
        }

        // Radex point is in the Hidden Bits Area
        //   Example: Scale = -11, int=45, size=6+32=38  -> bitsToClear=32+11   -.00000 101101[10101010010...00010]
        if (Scale < ExtraHiddenBits) //SCALE >= 0 and SCALE<ExtraHiddenBits
        {

        }


        // When rounding up...
        //   If Positive and Ceiling, and the abs(result) is a PowerOfTwo the size will grow by 1.  -1111.1 -> -10000, -10000 -> -10000
        //   If Negitive and Ceiling, the size should always remain the same.
        // Lets just remove the bits and clear ExtraHiddenBits
        //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  101101[1010.1010010...00010]  -> 101101[1010.0000000...00000]
        //   Example: Scale = -4, int=45, size=6+32=38  -> bitsToClear=32+4  10.1101[10101010010...00010]  -> 10.[00000000000...00000]
        if (_int.Sign <= 0)  //CHANGE >= to <=
        {
            // If Scale is between 0 and ExtraHiddenBits..
            //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  101101[1010.1010010...00010]  -> 101101[1010.0000000...00000]
            if (Scale >= 0)
            {
                return new BigFloat((_int >> bitsToClear) << bitsToClear, 0, _size);
            }

            //todo:  I think Size for something like -1111111111111111 might not be correct (maybe)

            // If Scale is between -size and 0..
            //   Example: Scale = -4, int=45, size=6+32=38  -> bitsToClear=32+4  10.1101[10101010010...00010]  -> 10.[00000000000...00000]
            return new BigFloat((_int >> (bitsToClear + 1)) << ExtraHiddenBits, 0, _size + Scale);
        }
        else
        {
            BigInteger intPart = ShiftRightAndRound(_int, bitsToClear);

            int newScale = ExtraHiddenBits - Math.Max(0, Scale);
            int newSize = (int)intPart.GetBitLength() + newScale; //future: maybe slow (maybe use BigInteger.TrailingZeroCount < _size to detect rollover)

            // If Scale is between 0 and ExtraHiddenBits..
            //   Example: Scale =  4, int=45, size=6+32=38  -> bitsToClear=32-4  -101101[1010.1010010...00010]  -> -101101[1011.0000000...00000]
            return Scale >= 0 ? new BigFloat(intPart << newScale, 0, newSize) : new BigFloat(intPart << newScale, 0, newSize);
        }
    }


    // Rounds to the next integer tawards positive infinity.
    public BigFloat Ceiling0()  //todo: test
    {
        int bitsToClear = ExtraHiddenBits - Scale;

        // Scale will always be zero or positive. (since all fraction bits are stripped away)
        // Size will be the size of the new integer part.
        // Precision of the decimal bits are stripped away. 

        // If less then zero, we can just return 1 for positive numbers and 0 for negitive.
        if (_size <= bitsToClear)
        {
            return _int.Sign > 0 ? new BigFloat(BigInteger.One << ExtraHiddenBits, 0, 1 + ExtraHiddenBits) : new BigFloat(0, 0, 0);
        }

        // If positive, increment if any fraction bits are non-zero
        BigInteger intPart = (_int >> (bitsToClear)) << ExtraHiddenBits;
        if (_int.Sign > 0 && BigInteger.TrailingZeroCount(_int) < bitsToClear)
        {
            intPart += (BigInteger)1 << ExtraHiddenBits;
        }

        // When rounding up...
        //   If Positive, to a PowerOfTwo the size will grow by 1
        //   If Negitive, the size should always remain the same.  -1111.1 -> -1111,  -1000 -> -1000

        // if negitive, we have to account for a possible PowerOfTwo round down to a larger size.
        int newSize = (_int.Sign >= 0) ? (int)BigInteger.Abs(intPart).GetBitLength() : _size + Scale;

        return new BigFloat(intPart, 0, newSize);
    }

=============== CEILING ============

SCALE >= ExtraHiddenBits
  Pos
    10101[01010101].  (no change)
    10101[01010101]0. (no change)
  Neg
    11110101[01010101].  (no change)
    11110101[01010101]0. (no change)   

SCALE >= 0 and SCALE < ExtraHiddenBits
  Pos (rounds)
    10101[01.010101]
    10101[10.000000] (rounds up but not always visible to the user, scale stays the same)

    10101[010.10101]
    10101[011.00000] (rounds up but not always visible to the user, scale stays the same)

    10101.[01010101]
    10110.[00000000] (rounds up, scale stays the same)

  Neg (no rounding)
    111110101[01.010101]
    111110101[01.000000] (clear bits only, no rounding)

    111110101[010.10101]
    111110101[010.00000] (clear bits only, no rounding)

    111110101.[01010101]
    111110101.[00000000] (clear bits only, no rounding)

SCALE < 0 
  Pos (rounds)
    10.101[01010101]
    11.[00000000]XXX (rounds up)

    10.000[01010101]
    10.[00000000]XXX doesn't round-up because bits between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) are not on

    10.000[10101010]  (aka 10.001)
    10.[00000000]XXX does    round-up because bits between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) are     on

  Neg (no rounding)
    11111110.101[01010101]
    11111110.[00000000]XXX (clear bits and shift only, no rounding)

    11111110.000[01010101]
    11111110.[00000000]XXX (clear bits and shift only, no rounding)
  
    11111110.000[10101010]  (aka 10.001)
    11111110.[00000000]XXX (clear bits and shift only, no rounding)

SCALE >= 0 and SCALE < ExtraHiddenBits
  Pos (rounds)
    10101[01.010101]
    10101[10.000000] (rounds up but not always visible to the user, scale stays the same)

    10101[010.10101]
    10101[011.00000] (rounds up but not always visible to the user, scale stays the same)

    10101.[01010101]
    10110.[00000000] (rounds up, scale stays the same)

  Neg
    11110101.[01010101] 
    11110101.[00000000] (clear bits only, no rounding)

    11110101[01.010101]
    11110101[01.000000] (clear bits only, no rounding)

    11110101[01010101.]
    11110101[01010101.] (skip, no rounding)

=============== FLOOR ============

SCALE >= ExtraHiddenBits
  Pos
    10101[01010101].  (no change)
    10101[01010101]0. (no change)
  Neg
    11110101[01010101].  (no change)
    11110101[01010101]0. (no change)   

SCALE >= 0 and SCALE < ExtraHiddenBits
  Pos (rounds)
    10101[01.010101]
    10101[10.000000] (rounds down but not always visible to the user, scale stays the same)

    10101[010.10101]
    10101[011.00000] (rounds down but not always visible to the user, scale stays the same)

    10101.[01010101]
    10110.[00000000] (rounds down, scale stays the same)

  Neg (no rounding)
    111110101[01.010101]
    111110101[01.000000] (clear bits only, no rounding)

    111110101[010.10101]
    111110101[010.00000] (clear bits only, no rounding)

    111110101.[01010101]
    111110101.[00000000] (clear bits only, no rounding)

SCALE < 0 
  Pos (rounds)
    10.101[01010101]
    11.[00000000]XXX (rounds up)

    10.000[01010101]
    10.[00000000]XXX doesn't round-down because bits between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) are not on

    10.000[10101010]  (aka 10.001)
    10.[00000000]XXX does    round-down because bits between (ExtraHiddenBits/2) and (ExtraHiddenBits-Scale) are     on

  Neg (no rounding)
    11111110.101[01010101]
    11111110.[00000000]XXX (clear bits and shift only, no rounding)

    11111110.000[01010101]
    11111110.[00000000]XXX (clear bits and shift only, no rounding)
  
    11111110.000[10101010]  (aka 10.001)
    11111110.[00000000]XXX (clear bits and shift only, no rounding)

SCALE >= 0 and SCALE < ExtraHiddenBits
  Pos (rounds)
    10101[01.010101]
    10101[10.000000] (rounds down but not always visible to the user, scale stays the same)

    10101[010.10101]
    10101[011.00000] (rounds down but not always visible to the user, scale stays the same)

    10101.[01010101]
    10110.[00000000] (rounds down, scale stays the same)

  Neg
    11110101.[01010101] 
    11110101.[00000000] (clear bits only, no rounding)

    11110101[01.010101]
    11110101[01.000000] (clear bits only, no rounding)

    11110101[01010101.]
    11110101[01010101.] (skip, no rounding)


