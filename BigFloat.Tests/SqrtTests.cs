// Copyright Ryan Scott White. 2020-2025
// Released under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sub-license, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// Starting 2/25, ChatGPT/Claude/GitHub Copilot/Grok were used in the development of this library.

// Ignore Spelling: Sqrt

using System.Diagnostics;
using System.Numerics;
using System.Text;

namespace BigFloatLibrary.Tests;

public class SqrtTests
{
    /// <summary>
    /// Target time for each test. Time based on release mode on 16 core x64 CPU.
    /// </summary>
    private readonly int TestTargetInMillseconds = 100;

#if DEBUG
    private const int MaxDegreeOfParallelism = 1;
    private const long sqrtBruteForceStoppedAt = 262144;
    private const long inverseBruteForceStoppedAt = 262144;
#else
    readonly int MaxDegreeOfParallelism = Environment.ProcessorCount;
    const long sqrtBruteForceStoppedAt = 524288;
    const long inverseBruteForceStoppedAt = 524288 * 1;
#endif

    private const int RAND_SEED = 22;// new Random().Next();
    private static readonly Random _rand = new(RAND_SEED);


    [Fact]
    public void Verify_Math_Sqrt()
    {
        BigFloat inputVal, valExpect, valResult;
        inputVal = new BigFloat("2.00000000000", 0);
        BigFloat val = BigFloat.Sqrt(inputVal);
        string output, expect;

        inputVal = new BigFloat("49");
        output = BigFloat.Sqrt(inputVal).ToString();
        expect = "7.0";
        Assert.Equal(output, expect);

        output = val.ToString();
        //        2.00000000000                            // 10.000000000000000000000000000000000000
        expect = "1.41421356237";
        //        1.41421356237 is best, but 1.414213562373 are acceptable 
        //        1.4142135623730950488016887242097           1.0110101000001001111001100110011111110 0111011110011001001000010
        Assert.Equal(output, expect);

        inputVal = new BigFloat("200000000000");
        output = BigFloat.Sqrt(inputVal).ToString();
        //        447213.595499                    // okay  1101101001011101101.100110000111001010011111010110011100110011111010111011111111010111000110110000010001101000..
        expect = "447213.595500";                  // best  1101101001011101101.100110000111001010110000001000001100010010011011101001011110001101010011111101111100111011...
                                                   //        447213.59549995793928183473374626   exact 1101101001011101101.100110000111001010101111011011000001111001011011111110110110010000111100001011000010100010...
        Assert.Equal(output, expect);

        inputVal = new BigFloat("0.0215841551");
        output = BigFloat.Sqrt(inputVal).ToString();
        //          215841551
        expect = "0.146915469";  //146915469(best) or 146915469[1-5](okay)
                                 //        0.14691546923316142068618979769788 //more precision on another system
                                 //       0.0215841551
        Assert.Equal(output, expect);

        inputVal = new BigFloat("0.000000001");
        output = BigFloat.Sqrt(inputVal).ToString();
        expect = "0.00003";
        //        0.000031622776601683793319988935444327 //more precision on another system
        Assert.Equal(output, expect);

        inputVal = new BigFloat("98765432109876543210987654321098765432109876543210987654321098765432109876543210");
        output = BigFloat.Sqrt(inputVal).ToString();
        //        9876543210987654321098765432109876543210 9876543210987654321098765432109876543210
        expect = "9938079900558082311789231964937550558064.6494438268544270221286846603357167897049";
        // exact: 9938079900558082311789231964937550558064.64944382685442702212868466033571678970487057062388... 
        Assert.Equal(output, expect);

        inputVal = new BigFloat("0.98765432109876543210987654321098765432109876543210987654321098765432109876543210");
        output = BigFloat.Sqrt(inputVal).ToString();
        //        0.98765432109876543210987654321098765432109876543210987654321098765432109876543210
        expect = "0.99380799005580823117892319649375505580646494438268544270221286846603357167897049";
        //        0.993807990055808231178923196493755055806464944382685442702212868466033571678970487057062388 //more precision on another system
        Assert.Equal(output, expect);

        inputVal = new BigFloat("23466207109390852182562229134844879465209207461285119050842725537452100070948111321244695716285488004820807390076326731850692667100714992415364312032227360362070027890120698082826669803953958791443305257455513984934956578611336998676672804562842121688708383087759159988954760747537602550118269197135294250359262819649936574767063922.01945122219918131773");
        valResult = BigFloat.Sqrt(inputVal);
        output = valResult.ToString();
        expect = "4844193132957319671709340941797445984823847916300558971839295375794565129018082952319997856028164815858716997110257694105883395223009099123324505808832930067526997557.67942784382363710559954840909262062040844976811740121716293669295087565452542991248498736784872402435202193650709055844125266714299502864068900000000000000000000000000000000000000000000";
        // exact: 4844193132957319671709340941797445984823847916300558971839295375794565129018082952319997856028164815858716997110257694105883395223009099123324505808832930067526997557.67942784382363710559954840909262062040844976811740121716293669295087565452542991248498736784872402435202193650709055844125266714299502864068899999999999999999999999999999999999999999999949320041843783
        Assert.Equal(output, expect);
        valExpect = new BigFloat("4844193132957319671709340941797445984823847916300558971839295375794565129018082952319997856028164815858716997110257694105883395223009099123324505808832930067526997557.679427843823637105599548409092620620408449768117401217162936692950875654525429912484987367848724024352021936507090558441252667142995028640689");
        Assert.True(valResult.EqualsUlp(valExpect));
    }

    [Fact]
    public void Verify_NewtonPlusSqrt_Common_Fails()
    {
        BigInteger temp;

        temp = BigInteger.Zero;
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        // Covered under the Verify_NewtonPlusSqrt_Brute_Force.
        //temp = BigInteger.Parse("4");
        //temp = BigInteger.Parse("15");

        temp = BigInteger.Parse("4503599761588224");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("144838757784765629");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("4332296397072526994426");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("197120777410685286861723419348662720446983624468633941814867274161329731855");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("65785897164448191381343511924499180834109624990100754110346692714720833794182365156704520567066494452568598038317099669513516096681618601973599684423150328823149127367318079223120613816366038825604373268484954782110429835105286425333570541703714024151532084137071597682869259489221172755742364472724201391713876228852531646764843076854104581946061772267221757994736893926938160629380056553372248214368909504039212458266423980657106363733011856061121104369672147994640441778258160341955435109744447134256187215376894548013860157067815014854327054401293768815922507649024668392519266407522576716874831315048731693618952003216023606499644720147295275387516119527423680540664128864272031313852922193652901872732314717832642396584320613044874876038709312185088372090147112187657869779392688566837197222873583961493636492878943080433802748761360310302723190158716092892744929758873685478975276800670405063542783787175166169602615999466339596354504219501105673891354573209038920435930403019087822420187428656762642041998808872161199084947727133936559102364496735902940200177931856797143955996184320324843305825519761471929663872341396515529983727108459536090173169742307430044945248663781699303787795654384125310492475708658293822181665360");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("62362385618440558416947016669824906883813410011053641792946485497339721329431721439415220243379222918320766404281447700590021891155050265114385592812878735466325208888593348836073537528761371853341648068552950252434358013341985391327537178373087155201768599524019380757016544450988505261122166827623821157388989385416619683557220268832127834874073559435984144961254858185346608192576658054546623242322471196316756094923811160906264371131392381779320586622639793335662752727861825331393639498034265911346139282451973559648859868126280816483538209855193358838624452241451974573654740521140261037836393493195199235018766811286482795967197478000411576883345741508867320043804212855588444336753360390022381829058493004310313059457501659510131594527812649374332829267428993258110432996432011983126655315265920566458028478121477367097244510948421854062842203915600005914824");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("105304873411458465237823109840830461532297664641861909345335983651620697961501875992724194244954865033669992328452594774452926688664213255617325573108242413961035542821302346985592911344125656037430417857923745187297258902871436992889265964566408383242965076143762182878415696697321419732252675577742829165177250146537026239309456512322120322660658657500735460842080634302497836781370951570897343811129414613636887318514067098255516234127025764803768697992519955839169838829708639416834170285096476387342434255498654317390346575985930158243128857324460324557274293835174709332634562827897313");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // failed with round up

        temp = BigInteger.Parse("4158778369644239253144735435452135103052920040777068394326845749479928668137113273641891938414472777155402871106641843416775631184591761508954289137159646589762108986911327059013268970766061512895207495793891523453588504760273949467854779946180645436561957963870029200019077271901983439750690458982602101659773464708927882431821592294995304801341476291809490825735434728904816304538249047761794496268396415473815044527283546569535324502176951155143748970420841309367267113066246134610984581041136088216956464090974746565616023221");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // Failed for huge sqrt() - maybe failed with round up

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // Failed for value Double.Max

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // Failed for value Double.Max1

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233599");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // Failed for value Double.Maxs

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233600");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp))); // Failed for value Double.Maxs

        temp = BigInteger.Parse("17494584706016591027735461995965655369485392135483279753178087315506247479908101322432716538350151127201566210005644237814513392249452453615066147272228907663966390734640115862609428708808030883561312370933224354989584163634780158683901786449438459917087336832199985240528014645163631305415749573655211490978631716429164715576326122339425754435169992953750485069221610238394718337618921655783782041008005224393274487002390986157125495569904504979630450742020277163243700439394100971116982469820853805921150898151992772979321237326399758133");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("324869344822123891204500737190540217603582230298827943613070138634574543931529836644908557280814426421865640009546187334173413368040022188428404427615158419933534601057247685980219135338184905291081445059428169291870657858169275815840222956732487620761154654410650902413711236901782615917737119907905229234946211961080658388960638760959363844640743773892304002116832698921887645232477218304189719735593244966041503279433593532306881416962517923413587821230750081023226603959650598328121575017362314407084534778367861380310792005727284136781374900887396549343");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("628585829943043711774780150124486302296386743285745807915546421548369772944349205519895063878854598279327388017081748928549003526040710666991887335679085821326590372431911569248580138566784523769649934299594659147063327786855481652768517809939447427274571843102808731405570448808757614071");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));

        temp = BigInteger.Parse("469219801800293764373197355969328553831984974596843971042368711922664472663701981746713137411270711303034626199044091413698918166643890203860091306664994072502482932661931411083539271868071588269998735494868914134645646190292788569954038367952474854129663");
        Assert.True(IsSqrt(temp, BigIntegerTools.NewtonPlusSqrt(temp)));
    }

    /// <summary>
    /// Sqrt - Verification 2: Brute Force testing (starting at 0)
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_Brute_Force()
    {
        _ = Parallel.For(0, sqrtBruteForceStoppedAt, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
        {
            BigInteger root = BigIntegerTools.NewtonPlusSqrt(x);
            BigInteger lowerBound = root * root;
            BigInteger upperBound = lowerBound + (2 * root) + 1;
            Assert.False(x < lowerBound || x >= upperBound); // In: {Math.Sqrt(x)} !!!!! {(lowerBound > x ? "Lo" : "Hi")}  In:{root}^2={x}  xShouldBe: {Math.Sqrt(x)}
        });
    }

    /// <summary>
    /// Sqrt - Verification 3: 2^n + [-5 to +5] Testing
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_2_Pow_n_Testing()
    {
        Stopwatch sw = Stopwatch.StartNew();
        for (int s = 0; s < 32; s++)
        {
            _ = Parallel.For((s * 512) + 8, (s * 512) + 512 + 8, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
            {
                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Stop();
                }

                for (long i = -5; i < 6; i++)
                {
                    BigInteger testVal = BigInteger.Pow(2, x) + i;

                    BigInteger root = BigIntegerTools.NewtonPlusSqrt(testVal);

                    BigInteger lowerBound = root * root;
                    BigInteger upperBound = lowerBound + (2 * root) + 1;

                    Assert.False(testVal < lowerBound || testVal >= upperBound); // testVal: 2^{x}{i} failed.
                }
            });
        }
    }

    /// <summary>
    /// Sqrt - Verification 4: 11111[n]00000[n] Testing
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_11110000()
    {
        Stopwatch sw = Stopwatch.StartNew();
        int startAt = BitOperations.Log2(sqrtBruteForceStoppedAt) - 1;

        _ = Parallel.For(startAt, 1000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
            {
                s.Stop();
            }

            for (int i = 1; i <= length; i++)
            {
                BigInteger v = ((BigInteger.One << i) - 1) << (length - i);
                BigInteger root = BigIntegerTools.NewtonPlusSqrt(v);

                BigInteger lowerBound = root * root;
                BigInteger upperBound = lowerBound + (2 * root) + 1;

                Assert.False(v < lowerBound || v >= upperBound); // failed: {i} 0's  {length - i} 1's
            }
        });
    }

    /// <summary>
    /// Sqrt - Verification 5: 1010101010101... Testing 
    /// example: 1, 10, 101, 1010, 10101....
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_10101010()
    {
        Stopwatch sw = Stopwatch.StartNew();
        int startAt = BitOperations.Log2(sqrtBruteForceStoppedAt) - 1;

        _ = Parallel.For(startAt, 10000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
            {
                s.Stop();
            }

            BigInteger v = 1;
            for (int i = 2; i < length; i += 2)
            {
                v = (v << 2) + 1;
            }
            if ((length & 1) == 0)
            {
                v <<= 1;
            }

            BigInteger root = BigIntegerTools.NewtonPlusSqrt(v);

            BigInteger lowerBound = root * root;
            BigInteger upperBound = lowerBound + (2 * root) + 1;

            Assert.False(v < lowerBound || v >= upperBound); // Failed on a '10101010101..' test with length {length}
        });
    }

    /// <summary>
    /// Sqrt - Verification 6: n^2 -[0,1] Testing
    /// note: n^2 some overlap here with the "n^[2,3,5,6,7] + [-2,-1,0,1,2] Testing"
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_Pow2()
    {
        Stopwatch sw = Stopwatch.StartNew();
        BigInteger c = (BigInteger)Math.Sqrt(sqrtBruteForceStoppedAt);

        while (sw.ElapsedMilliseconds < TestTargetInMillseconds)
        {
            _ = Parallel.For(0, 1024, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
            {
                for (int i = 0; i < 2; i++)
                {
                    BigInteger valToTest = (2 * (c + x)) - i;
                    BigInteger root = BigIntegerTools.NewtonPlusSqrt(valToTest);

                    BigInteger lowerBound = root * root;
                    BigInteger upperBound = lowerBound + (2 * root) + 1;

                    Assert.False(valToTest < lowerBound || valToTest >= upperBound); // Failed on {cx}^2 - {i}
                }

                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Stop();
                }

            });

            c += 1024;
        }
    }

    /// <summary>
    /// Sqrt - Verification 7: Random number testing...
    /// </summary>
    [Fact]
    public void Verify_NewtonPlusSqrt_RandomNumberTesting()
    {
        int randomMinBitSize = -1;
        int randomMaxBitSize = 5000;

        Stopwatch sw = Stopwatch.StartNew();

        _ = Parallel.For(0, MaxDegreeOfParallelism, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (p, s) =>
        {
            Random r = new(p + RAND_SEED);
            int counter = 0;
            while (true)
            {
                //int bitLenRangeBeg = (int)Math.Log2(4e34) + 10;//BitOperations.Log2((ulong)BruteForceStoppedAt)-1; //(int)Math.Log2(4e254) -3;
                //int bitLenRangeEnd = (int)Math.Log2(4e34) + 12; //1e308

                int bitLenBeg = (randomMinBitSize >= 0) ? randomMinBitSize : (BitOperations.Log2(sqrtBruteForceStoppedAt) - 1); //(int)Math.Log2(4e254) -3;
                int bitLenEnd = randomMaxBitSize;

                int bitLen = r.Next(bitLenBeg, bitLenEnd) + 1;
                int byteCt = (bitLen + 7) / 8;
                byte[] bytes = new byte[byteCt];
                r.NextBytes(bytes);
                bytes[byteCt - 1] |= 0x80;
                bytes[byteCt - 1] >>= 7 - ((bitLen - 1) % 8);
                BigInteger x = new(bytes, true, false);
                //x += counter + p; // a little extra randomness; can cause bitLen to go over.

                if (x < sqrtBruteForceStoppedAt)
                {
                    continue;
                }

                BigInteger a01 = BigIntegerTools.NewtonPlusSqrt(x);

                BigInteger lowerBound = a01 * a01;
                BigInteger upperBound = lowerBound + (2 * a01) + 1;

                int offby = 0;
                bool failed = lowerBound > x || upperBound <= x;
                if (failed)
                {
                    for (int i = -32; i < 32; i++)
                    {
                        if (x >= ((a01 + i) * (a01 + i))) //is high
                        {
                            offby = i;
                        }
                    }
                }

                Assert.False(failed); // Failed on random number check with {x}. It is off by {offby}.

                if (counter++ % 0x1000000 == 0)
                {
                    Debug.WriteLine($"Status {string.Format("{0:T}", DateTime.Now)}: thread:{p}\tCount:{counter}\t2^{x.GetBitLength() - 1}/{(double)x}");
                }

                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Break();
                    break;
                }
            }
        });
    }

#if !DEBUG
    [Fact]
    public void VerifyNewtonPlusSqrtShouldFail1()
    {
        Assert.Throws<ArgumentException>(() => _ = BigIntegerTools.NewtonPlusSqrt(-1));
    }

    [Fact]
    public void VerifyNewtonPlusSqrtShouldFail2()
    {
        BigInteger input = (BigInteger)double.MinValue + (BigInteger)double.MinValue;
        Assert.Throws<ArgumentException>(() => _ = BigIntegerTools.NewtonPlusSqrt(input));
    }
#endif

    private static bool IsSqrt(BigInteger n, BigInteger root)
    {
        //source: https://github.com/pilotMike/Euler-Challenges-v2/blob/962f981c87e394773507bc00a708fdae202aa61c/EulerTools/Extensions/MyExtensions.cs  Michael DiLeo 2015
        BigInteger lowerBound = root * root;
        BigInteger upperBound = lowerBound + root + root + 1;
        return n >= lowerBound && n < upperBound;
    }


    [Fact]
    public void Verify_Inverse()
    {
        Assert.Equal(BigFloat.Inverse(new BigFloat("1.000")), new BigFloat("1.000")); // Failed on: Inverse(1.000)
        Assert.Equal(BigFloat.Inverse(new BigFloat("2.000")), new BigFloat("0.5000")); // Failed on: Inverse(2.000)
                                                                                       // To-Do: reviewed this and it should pass - we need to update the compare function
        Assert.Equal(BigFloat.Inverse(new BigFloat("3.000")), new BigFloat("0b0.010101010101010101010101010101010101010101010", 0, 32)); // Failed on: Inverse(3.000)
        Assert.Equal(BigFloat.Inverse(new BigFloat("0.5000")), new BigFloat("2.000")); // Failed on: Inverse(0.5000)
        Assert.Equal(BigFloat.Inverse(new BigFloat("0.3333")), new BigFloat("3.000")); // Failed on: Inverse(0.3333)

        BigFloat a = new("0.33333333333333");
        BigFloat b = new("3.0000000000000"); // 3.0000000000000
                                             // a0:  0.01010101010101010101010101010101010101010101001011111100110110...   0.333333333333325
                                             // a1:  0.01010101010101010101010101010101010101010101010111001101011011...   0.333333333333335
                                             // a2:  11.0000000000000000000000000000000000000000000 1010100 3.00000000000007500
                                             // a3:  10.1111111111111111111111111111111111111111111 1101111 2.99999999999998500
                                             // a4:   0.0000000000000000000000000000000000000000000 1100101 0.00000000000009
                                             // b1:  10.1111111111111111111111111111111111111111111 1000111 2.99999999999995
                                             // b2:  11.0000000000000000000000000000000000000000000 0111000 3.00000000000005
                                             // b3:   0.0000000000000000000000000000000000000000000 1110000 0.0000000000001
                                             // true, by a small margin, because a4 == b3
        Assert.Equal(BigFloat.Inverse(a), b); // Failed on: Inverse(0.33333333333333)

        a = new BigFloat("-0.333333333333333333333333333");
        b = new BigFloat("-3.00000000000000000000000000"); //3.00000000000000000000000000
                                                           // a0: 0.01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 00100 0.3333333333333333333333333325
                                                           // a1: 0.01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 11000 0.3333333333333333333333333335
                                                           // a2:   11.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000 10010 3.0000000000000000000000000075 (0.3333333333333333333333333325)
                                                           // a3:   10.11111111111111111111111111111111111111111111111111111111111111111111111111111111111111 11100 2.9999999999999999999999999985 (0.3333333333333333333333333335)
                                                           // a4:    0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000 10110 0.000000000000000000000000009
                                                           // b1:   11.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000 01100 3.000000000000000000000000005
                                                           // b2:   10.11111111111111111111111111111111111111111111111111111111111111111111111111111111111111 10011 2.999999999999999999999999995
                                                           // b3:    0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000 11000 0.00000000000000000000000001
                                                           // would be true, by a small margin, because a4 == b3 
                                                           // BUT 0.333333333333333333333333333 is stored with guard bits being 0x00000000 so it comes up false
        Assert.Equal(BigFloat.Inverse(a), b); // Failed on: Inverse(-0.333333333333333333333333333)

        b = new BigFloat("-3.0000"); // more true since too small (allows for larger tolerance)
        Assert.Equal(BigFloat.Inverse(a), b); // Failed on: Inverse(-0.333333333333333333333333333)

        b = new BigFloat("-3.000000000000000000000000000"); // false
        Assert.Equal(BigFloat.Inverse(a), b); // Failed on: Inverse(-0.333333333333333333333333333)

        a = new BigFloat("7.9697706335180071911585875567198e-26");
        b = new BigFloat("12547412541514775369202510");
        Assert.Equal(BigFloat.Inverse(a), b); // Failed on: Inverse(0.5000)
    }

    /// <summary>
    /// Inverse Verification 1: Common Fails
    /// </summary>
    [Fact]
    public void Verify_Inverse_Common_Fails()
    {
        _ = CheckInverse(BigInteger.MinusOne);
        _ = CheckInverse(BigInteger.One);
        BigInteger valToTest = BigInteger.Parse("8273153554255617868983008432299507701873690283447163912225368429446311715550180068658483561349865846704311797996005892990494607142525675800342567010930760478881504606029054999488050624099750939339790755426321297478858807972510657577430552150649899640468901338121294090979219428234512847003533414175726178693610069347755095659695353545360529790683181065043538446867918248788742705333365840422466199773229341881841562551926235483545177894989221351527346588987721531194144175285969973689640218042094418808237706900648114671371775300698367651383174442595695957899162146670906778789201530522867749937550298524431256635047931");
        _ = CheckInverse(valToTest);
        _ = CheckInverse(valToTest + 1);
        _ = CheckInverse(BigInteger.Parse("374622190995713598813029737925947051705809638079728648837203317232520450544987889076160147970041374918121757949602129193189627732344065706383371226187835319714209031377906"));
        _ = CheckInverse(BigInteger.Parse("285013714838916124746332799963584856696559114154526436450316172786090750322481976436201683157295661247422269749708947463647574230159095313041740438915381154333683134147981881052909187062730083973334780414971356303334003636993678034868083193818348023091003363888921565718173027783621779517877300200724459318883522235112068285932195519037519165902397752860489674895796976400390836349751427026061658964203208207986236200932628791719083132376094639338301197454891161371254361839889401887706282292505789937819779959717878950744690490451460250552140684616855021515468623300887218921710277512975593031191949892800748540749262661949870473705897585049029946162622106546347620917265696194559801244123684550639057819166981442116592210707318201455631684986737606526635568852133623155695703543483277590334799035273474221366689251730228654333498348983148060215237998018186668782906813463794675647274428135720809334669780620193631012355614590578191925576697141901"));
        _ = CheckInverse(BigInteger.Parse("645939712405401427719711254063813468156213415200850699928240890973548642930906671628067939561389768742610260274947216253535958539046510117181847336215500441547828988008499863283321060888285180958716586132295468008708718750886004174750090339672254391327068510418655854996295608654912181466562066392576946408280444645720652219224611465788921115672007871684057345123697713619795572111218976868165977088388076018155579127963692414645217516226582443109944361333778959142017020766702585614084557002374143856684835403030114576877613125361001081612661505866535992828793261026218710006019409384286248553489144084836908483354058059174031935080941095970669550752672290188012935344941625941224776598832005105461709062131845129678963155310027422917876006618051141488519807701539489712459454171376535906228081656842506129847531133807702931600418505954342868857145344054108555281592568541709103974802015219413388401920300146704419785634503745727784608594651862819775429285667691480255596598355137918884688681242925903869182365424076667891828794970711995156501553646245103285321272836088502175303126383961643724861657121768832605051542254287022038928115325910288733210686961346257986675795521419117484112569337949140264990"));
        _ = CheckInverse(BigInteger.Parse("14226342718751118987907712656792939014609116305038288508984965665170435278580333690269830569305522770533115648153109977677970505910625922454536026835852861332513459837041790011369159613511987064990374692209153941946410250817507783093926309366818470453091487613497831683214972282433680630982532763190683188379014716931664367628856712864496549434590849436602433350062473844636337430852410107263030344416723319870714159741005261604289621571405370996571482202189946969590725396299242462841573118206347715965805077151815088089898712040656448748652946583617809438541519496216169721658653723720561561601101228727064752442615455482001090437223561687360017043925134663500743462770265751193548606236574887993897708234798015778243132964667428178856994844952952767372869586443371631986024216806390351458153350155473742698605698036672929293892925483318864445513221152207924537215494391086982099603955047363639252292415150243702042020253673557543258256080860766767245166366206504042341743664890169812601231127032334294569486704846172949043552949441316944714028840689338784401867179801203613271182276331013888454830352391740343025859921596673531204457761831252242526173047406966821405710834640264664514325319700094788810229600338339048034248472906440829567003568352904106454211600272772441256937357011526350840028766974271849878883968029793821029979280359368212174059092944193932724591216533306907868949240183508100414983415165523499662280683154859830743035090387199495274469840495806979622786301340"));
        _ = CheckInverse(BigInteger.Parse("41597037944448288110263031477097654167384303281785501659348547438859712932895265129174863537442219208764808367754224325676189013224863230815238211318298805347258792422345044074873622426170281290814220505198280942180680987026072516738908213582080426073114716009829990895938425085364287895467011390686208508278438730461229031670604488583132047013295327251056792004212211984418619663447584994978851293935131110818345158735090825798050014339956039806087253671405307536505969146032086905214682999371273072327848485190337222112654049779316736398006552350156349884603007360240860067257909482396786549588732357562118172137668037090856181026987902018187123355906466294875863290720195176549809520330510535389796132984892059640168902171480943753536264315689507100966013546691280187870571451205108217441077590372742568828587495458227141473387320433587383078311146940539855321485599293540008356160519179316373740003907476816065356834101152604366223141056328388148703861540389801990631343518586799040845656241392934834522495698513979794700246917693292354190436213407849292690244331619453139129528311878463071451903744767274814238809831756377838973380878611727693240233305958509793663676407892016477218846901984357526107274350245333587892891647258020839563922086967136639138149549163501535002313407476514168371528265958304129029559790809555296315581870799758675251593555164438335668433357530966606494565841539517226231078555238897938082287091553434761476447011358899223501505465429569334182561228540892303214811082283526723697168379678479540727712438070861914927293109710911106707261295892041586638725763206110753540190896772169081260784380"));

    }

    /// <summary>
    /// Inverse Verification 2: Brute Force testing (starting at 0)
    /// </summary>
    [Fact]
    public void Verify_Inverse_Brute_Force()
    {
        _ = Parallel.For(2, inverseBruteForceStoppedAt, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (valToTest, s) =>
        {
            _ = CheckInverse(valToTest);
        });
    }

    /// <summary>
    /// Inverse Verification 3: 2^n + [-5 to +5] Testing
    /// </summary>
    [Fact]
    public void Verify_Inverse_2_Pow_n_Testing()
    {
        Stopwatch sw = Stopwatch.StartNew();
        for (int s = 0; s < 32; s++)
        {
            _ = Parallel.For((s * 512) + 8, (s * 512) + 512 + 8, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
            {
                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Stop();
                }

                for (long i = -5; i < 6; i++)
                {
                    BigInteger valToTest = BigInteger.Pow(2, x) + i;
                    _ = CheckInverse(valToTest);
                }
            });
        }
    }

    /// <summary>
    /// Inverse Verification 4: 11111[n]00000[n] Testing
    /// </summary>
    [Fact]
    public void Verify_Inverse_11110000()
    {
        Stopwatch sw = Stopwatch.StartNew();
        int startAt = BitOperations.Log2(inverseBruteForceStoppedAt) - 1;

        _ = Parallel.For(startAt, 1000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
            {
                s.Stop();
            }

            for (int i = 1; i <= length; i++)
            {
                BigInteger valToTest = ((BigInteger.One << i) - 1) << (length - i);
                _ = CheckInverse(valToTest);
            }
        });
    }

    /// <summary>
    /// Inverse Verification 5: 1010101010101... Testing 
    /// example: 1, 10, 101, 1010, 10101....
    /// </summary>
    [Fact]
    public void Verify_Inverse_10101010()
    {
        Stopwatch sw = Stopwatch.StartNew();
        int startAt = BitOperations.Log2(inverseBruteForceStoppedAt) - 1;

        _ = Parallel.For(startAt, 10000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
            {
                s.Stop();
            }

            BigInteger valToTest = 1;
            for (int i = 2; i < length; i += 2)
            {
                valToTest = (valToTest << 2) + 1;
            }
            if ((length & 1) == 0)
            {
                valToTest <<= 1;
            }
            _ = CheckInverse(valToTest);

        });
    }

    /// <summary>
    // Inverse Verification 6: n^2 -[0,1] Testing
    //note: n^2 some overlap here with the "n^[2,3,5,6,7] + [-2,-1,0,1,2] Testing"
    /// </summary>
    [Fact]
    public void Verify_Inverse_Pow2()
    {
        Stopwatch sw = Stopwatch.StartNew();
        BigInteger c = (BigInteger)Math.Sqrt(inverseBruteForceStoppedAt);

        while (sw.ElapsedMilliseconds < TestTargetInMillseconds)
        {
            _ = Parallel.For(0, 1024, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
            {
                for (int i = 0; i < 2; i++)
                {
                    BigInteger valToTest = (2 * (c + x)) - i;
                    _ = CheckInverse(valToTest);
                }

                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Stop();
                }
            });

            c += 1024;
        }
    }

    /// <summary>
    // Inverse Verification 7a: Random small number testing...
    /// </summary>
    [Fact]
    public void Verify_Inverse_RandomNumberTesting_Under_3000bits()
    {
        int randomMinBitSize = -1;
        int randomMaxBitSize = 3000;

        Stopwatch sw = Stopwatch.StartNew();
        int fullCounter = 0;
        _ = Parallel.For(0, MaxDegreeOfParallelism, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (p, s) =>
        {
            Random r = new(p + RAND_SEED);
            int counter = 0;
            while (true)
            {
                //int bitLenRangeBeg = (int)Math.Log2(4e34) + 10;//BitOperations.Log2((ulong)BruteForceStoppedAt)-1; //(int)Math.Log2(4e254) -3;
                //int bitLenRangeEnd = (int)Math.Log2(4e34) + 12; //1e308

                int bitLenBeg = (randomMinBitSize >= 0) ? randomMinBitSize : (BitOperations.Log2(inverseBruteForceStoppedAt) - 1); //(int)Math.Log2(4e254) -3;
                int bitLenEnd = randomMaxBitSize;

                int bitLen = r.Next(bitLenBeg, bitLenEnd) + 1;
                int byteCt = (bitLen + 7) / 8;
                byte[] bytes = new byte[byteCt];
                r.NextBytes(bytes);
                bytes[byteCt - 1] |= 0x80;
                bytes[byteCt - 1] >>= 7 - ((bitLen - 1) % 8);
                BigInteger valToTest = new(bytes, true, false);

                _ = CheckInverse(valToTest);

                fullCounter++;
                if (counter++ % 0x1000000 == 0)
                {
                    Debug.WriteLine($"Status {string.Format("{0:T}", DateTime.Now)}: thread:{p}\tCount:{counter}\t2^{valToTest.GetBitLength() - 1}/{(double)valToTest}");
                }

                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Break();
                    break;
                }
            }
        });
        //Console.WriteLine($"Total Count: {fullCounter}");
    }

    /// <summary>
    // Inverse Verification 7b: Random large number testing...
    /// </summary>
    [Fact]
    public void Verify_Inverse_RandomNumberTesting_Over_3000bits()
    {
        int randomMinBitSize = 3000;
        int randomMaxBitSize = 10000;

        Stopwatch sw = Stopwatch.StartNew();
        int fullCounter = 0;
        _ = Parallel.For(0, MaxDegreeOfParallelism, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (p, s) =>
        {
            Random r = new(p + RAND_SEED);
            int counter = 0;
            while (true)
            {
                //int bitLenRangeBeg = (int)Math.Log2(4e34) + 10;//BitOperations.Log2((ulong)BruteForceStoppedAt)-1; //(int)Math.Log2(4e254) -3;
                //int bitLenRangeEnd = (int)Math.Log2(4e34) + 12; //1e308

                int bitLenBeg = (randomMinBitSize >= 0) ? randomMinBitSize : (BitOperations.Log2(inverseBruteForceStoppedAt) - 1); //(int)Math.Log2(4e254) -3;
                int bitLenEnd = randomMaxBitSize;

                int bitLen = r.Next(bitLenBeg, bitLenEnd) + 1;
                int byteCt = (bitLen + 7) / 8;
                byte[] bytes = new byte[byteCt];
                r.NextBytes(bytes);
                bytes[byteCt - 1] |= 0x80;
                bytes[byteCt - 1] >>= 7 - ((bitLen - 1) % 8);
                BigInteger valToTest = new(bytes, true, false);

                _ = CheckInverse(valToTest);

                fullCounter++;
                if (counter++ % 0x1000000 == 0)
                {
                    Debug.WriteLine($"Status {string.Format("{0:T}", DateTime.Now)}: thread:{p}\tCount:{counter}\t2^{valToTest.GetBitLength() - 1}/{(double)valToTest}");
                }

                if (sw.ElapsedMilliseconds > TestTargetInMillseconds)
                {
                    s.Break();
                    break;
                }
            }
        });
        //Console.WriteLine($"Total Count: {fullCounter}");
    }

#if !DEBUG
    [Fact]
    public void VerifyInverseShouldFailOnZeroInput()
    {
        Assert.Throws<DivideByZeroException>(() => _ = BigIntegerTools.Inverse(0));
    }

    [Fact]
    public void VerifyInverseShouldFailOnNegativePrecision()
    {
        Assert.Throws<ArgumentException>(() => _ = BigIntegerTools.Inverse(1,-1));
    }
#endif

    private static bool CheckInverse(BigInteger x)
    {
        BigInteger xInvRes = BigIntegerTools.Inverse(x);
        BigInteger xInvTst = InverseClassic(x);

        int correctBits = 0;
        bool success = xInvRes == xInvTst;
        StringBuilder sb = new();

        if (!success)
        {
            _ = sb.AppendLine($"Inverse Fail with input {x}");
            _ = sb.AppendLine($"  Result: {xInvRes} !=");
            _ = sb.AppendLine($"  Answer: {xInvTst}");

            if (xInvRes.GetBitLength() != x.GetBitLength())
            {
                _ = sb.AppendLine($"  Result length incorrect:  [{xInvRes.GetBitLength()}] != [{x.GetBitLength(),-4}]");
            }

            if (xInvTst.GetBitLength() != x.GetBitLength())
            {
                _ = sb.AppendLine($"  Classic length incorrect: [{xInvTst.GetBitLength()}] != [{x.GetBitLength(),-4}]");
            }

            correctBits = BigIntegerTools.ToBinaryString(xInvRes).Zip(BigIntegerTools.ToBinaryString(xInvTst), (c1, c2) => c1 == c2).TakeWhile(b => b).Count();
            if (xInvRes.GetBitLength() - correctBits > 0)
            {
                _ = sb.AppendLine($"  incorrect bits:[{xInvRes.GetBitLength() - correctBits}]  CorrectBits:[{correctBits}] of [{xInvRes.GetBitLength()}]");
            }

            Assert.True(false); // sb.ToString()
        }

        return success;

        static BigInteger InverseClassic(BigInteger x, int requestedPrecision = 0)
        {
            int xLen = (int)x.GetBitLength();
            if (requestedPrecision == 0)
            {
                requestedPrecision = xLen;
            }
            else if (requestedPrecision < 0)
            {
                throw new DivideByZeroException("'precisionBits' can not be negative.");
            }
            return x.IsPowerOfTwo
                ? (BigInteger.One * x.Sign) << (int)BigInteger.TrailingZeroCount(x)
                : (BigInteger.One << (xLen + ((requestedPrecision == 0) ? xLen : requestedPrecision) - 1)) / x;
        }
    }
}